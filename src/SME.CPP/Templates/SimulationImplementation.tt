﻿<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
#include "<#= Naming.SimulatorFileName(Network) #>.hpp"

// The names of all signals
std::string <#= Naming.AssemblyNameToFileName(Network) #>_SIGNAL_NAMES[] = {
<# foreach (var signal in RS.DriverSignals.Concat(RS.VerifySignals)) {
       var cpptype = RS.TypeScope.GetType(signal);
       if (cpptype.IsArray) {
           var eltype = cpptype.ElementName;
           var length = (int)RS.GetArrayLength(signal).DefaultValue;
           for(var i = 0; i < length; i++) {
#>
    "<#= RS.TestBenchSignalName(signal) #>(<#= i #>)",
<#         } #>
<#     } else { #>
    "<#= RS.TestBenchSignalName(signal) #>",
<#     } #>
<# } #>
};

<# foreach(var process in Network.Processes) {
       var members = process
           .SharedVariables.Cast<AST.DataElement>()
           .Union(process.SharedSignals)
           //.Where(x => RS.TypeScope.GetType(x).IsArray)
           .Where(x => (x.DefaultValue is SME.AST.ArrayCreateExpression) || (x.DefaultValue is Array));
           foreach (var v in members) {
               var rt = RS.TypeScope.GetType(v);
               var eltype = rt.ElementName;
               var arraylen = RS.GetArrayLength(v).DefaultValue;
#>
const <#= eltype #> init_<#= Naming.ProcessNameToValidName(process) #>_<#= Naming.ToValidName(v.Name) #>[<#= arraylen #>] = <#= RS.Renderer.GetInitializer(v) #>;
<#     } #>
<# } #>


<#= Naming.AssemblyNameToFileName(Network) #>::<#= Naming.AssemblyNameToFileName(Network) #>()
    :
<# foreach(var bus in Network.Busses) { #>
        bus_<#= Naming.BusNameToValidName(bus) #>(),
<# } #>
<# foreach(var process in Network.Processes) {

       var busses = process.InputBusses.Concat(process.OutputBusses).Concat(process.InternalBusses).Distinct().OrderBy(x => x.Name).ToArray();
       var members = process.SharedVariables.Cast<AST.DataElement>().Union(process.SharedSignals).ToArray();
#>
        proc_<#= Naming.ProcessNameToValidName(process) #>(
<# foreach(var bus in busses) { #>
            &bus_<#= Naming.BusNameToValidName(bus) #><#= (bus == busses.Last() & members.Length == 0) ? "" : ", " #>
<# } #>
<# foreach(var v in members) {
       var initializer = RS.Renderer.GetInitializer(v);
       if (!string.IsNullOrWhiteSpace(initializer)) {
           var rt = RS.TypeScope.GetType(v);
           if (rt.IsArray) {
               var eltype = rt.ElementName;
               var arraylen = RS.GetArrayLength(v).DefaultValue;

#>
            <#= arraylen #>,
<#

               if ((v.DefaultValue is SME.AST.ArrayCreateExpression) || v.DefaultValue is Array) { #>
            init_<#= Naming.ProcessNameToValidName(process) #>_<#= Naming.ToValidName(v.Name) #><#= v == members.Last() ? "" : "," #>
<#             } else { #>
            new <#= eltype #>[<#= arraylen #>]()<#= v == members.Last() ? "" : "," #>
<#             } #>
<#         } else { #>
            <#= initializer #><#= v == members.Last() ? "" : "," #>
<#         } #>
<#     } #>
<# } #>
        ),
<# } #>
        trace_input(NULL),
        input_line(),
        cycle(0)
{

}

size_t <#= Naming.AssemblyNameToFileName(Network) #>::RunSimulation(const char* inputfile)
{
    LoadTraceInput(inputfile);

    // Ignore the reset cycle
    DriveFromTraceInput();

    while(true) {
        if (!DriveFromTraceInput()) {
            size_t res = cycle;
            Stop();
            return res;
        }
        OnTick();
        VerifyTrace();
        FinishCycle();
    }
}

void <#= Naming.AssemblyNameToFileName(Network) #>::LoadTraceInput(const char* inputfile)
{
    if (trace_input != NULL)
       throw MessageException("Already have an input trace file open");

    // Open the trace file and validate the headers
    trace_input = new std::ifstream(inputfile);
    if (trace_input->bad()) {
        trace_input->close();
        throw MessageException("Trace input file not found, or not able to open");
    }

    if (!std::getline(*trace_input, input_line)) {
        throw MessageException("Trace input file was empty");
    }

    if (cycle != 0) {
        throw MessageException("Cannot load input file after the simulation has started");
    }

    std::string token;
    std::istringstream headerlinestream(input_line);
    size_t field = 0;
    while(std::getline(headerlinestream, token, ',')) {
        if (token.compare(<#= Naming.AssemblyNameToFileName(Network) #>_SIGNAL_NAMES[field]) != 0) {

            std::stringstream sstm;
            sstm << "Field #" << field << " should be named " << <#= Naming.AssemblyNameToFileName(Network) #>_SIGNAL_NAMES[field] << " but is named " << token << ", the trace file cannot be used";
            throw MessageException(sstm.str());
        }
        field++;
    }

    cycle = 0;
}

<# var driver_signal_count = 0; #>

bool <#= Naming.AssemblyNameToFileName(Network) #>::DriveFromTraceInput()
{
    if (trace_input == NULL) {
        throw MessageException("Trace input file is not loaded");
    }

    if (!std::getline(*trace_input, input_line)) {
        return false;
    }

    size_t i;
    std::string token;
    std::istringstream valuestream(input_line);
    size_t field = 0;

<#  foreach (var signal in RS.DriverSignals) {
       var cpptype = RS.TypeScope.GetType(signal);
       if (cpptype.IsArray) {
           var eltype = cpptype.ElementName;
           var length = (int)RS.GetArrayLength(signal).DefaultValue;
           driver_signal_count += length;
#>
    for (i = 0; i < <#= length #>; i++) {
        if (!std::getline(valuestream, token, ',')) {
            std::stringstream sstm;
            sstm << "Unexpected end-of-line in cycle " << cycle << ", field " << field << ", <#= signal.Name #>[" << i << "]" << std::endl;
            throw MessageException(sstm.str());
        }
        if (token.compare("U") != 0)
            bus_<#= Naming.BusNameToValidName(signal.Parent as AST.Bus) #>.<#= signal.Name #>(i, parse_<#= eltype #>(token));
        field++;
    }
<#
       } else {
           driver_signal_count++;
#>
    if (!std::getline(valuestream, token, ',')) {
        std::stringstream sstm;
        sstm << "Unexpected end-of-line in cycle " << cycle << ", field " << field << ", <#= signal.Name #>[" << i << "]" << std::endl;
        throw MessageException(sstm.str());
    }
    if (token.compare("U") != 0)
        bus_<#= Naming.BusNameToValidName(signal.Parent as AST.Bus) #>.<#= signal.Name #>(parse_<#= RS.TypeScope.GetType(signal).Name #>(token));
    field++;
<#     } #>

<# } #>

    return true;
}

void <#= Naming.AssemblyNameToFileName(Network) #>::FinishCycle()
{
    cycle++;
<# if (Network.Busses.Any(x => x.IsClocked)) { #>
        // Propagate clocked busses
<#     foreach(var bus in Network.Busses.Where(x => x.IsClocked)) { #>
        bus_<#= bus.Name #>.Propagate();
<#     } #>
<# } #>
}

void <#= Naming.AssemblyNameToFileName(Network) #>::OnTick()
{

<#     foreach(var p in Network.Processes.Where(x => x.IsClocked).Distinct()) { #>
    proc_<#= Naming.ProcessNameToValidName(p) #>.onTick();
<#     } #>
<#     foreach(var b in Network.Busses.Where(x => x.IsClocked).Distinct()) { #>
    bus_<#= Naming.BusNameToValidName(b) #>.propagate_signals();
<#     } #>


<# foreach(var n in Graph.ExecutionPlan) {
       var pn = GetProcess(n.Item);
       if (pn != null && !pn.IsClocked) {
#>
    proc_<#= Naming.ProcessNameToValidName(pn) #>.onTick();
<#     } #>
<#     foreach(var b in n.Item.OutputBusses.SelectMany(x => x).Distinct()) { #>
    bus_<#= Naming.BusNameToValidName(GetBus(b)) #>.forward_signals();
<#     } #>
<#     foreach(var b in n.PropagateAfter) { #>
    bus_<#= Naming.BusNameToValidName(GetBus(b)) #>.propagate_signals();
<#     } #>
<#     foreach(var b in n.Item.InternalBusses.SelectMany(x => x)) { #>
    bus_<#= Naming.BusNameToValidName(GetBus(b)) #>.forward_signals();
    bus_<#= Naming.BusNameToValidName(GetBus(b)) #>.propagate_signals();
<#     } #>
<# } #>
}

void <#= Naming.AssemblyNameToFileName(Network) #>::VerifyTrace()
{
    if (trace_input == NULL) {
        throw MessageException("Trace input file is not loaded");
    }

    size_t i;
    size_t field = 0;
    std::string token;
    std::istringstream valuestream(input_line);

    // Forward past the <#= driver_signal_count #> signals
    for(i = 0; i < <#= driver_signal_count #>; i++) {
        if (!std::getline(valuestream, token, ',')) {
            throw MessageException("Unexpected end-of-stream");
        }
        field++;
    }

    bool source_is_undef;

<# foreach (var signal in RS.VerifySignals) {
       var cpptype = RS.TypeScope.GetType(signal);
       var typecast = cpptype.Name == "system_uint8" ? "(int)" : "";
       if (cpptype.IsArray) {
           typecast = cpptype.ElementName == "system_uint8" ? "(int)" : "";
           var eltype = cpptype.ElementName;
           var length = (int)RS.GetArrayLength(signal).DefaultValue;
#>
    for (i = 0; i < <#= length #>; i++) {
        if (!std::getline(valuestream, token, ',')) {
            std::stringstream sstm;
            sstm << "Unexpected end-of-line in cycle " << cycle << ", field " << field << std::endl;
            throw MessageException(sstm.str());
        }

        source_is_undef = false;
        try {
            <#= eltype #> tmpval = bus_<#= Naming.BusNameToValidName(signal.Parent as AST.Bus) #>.<#= signal.Name #>(i);
        } catch (InvalidReadException e) {
            source_is_undef = true;
        }

        if (token.compare("U") == 0 && source_is_undef) {
         // Don't care
        } else if (token.compare("U") != 0 && bus_<#= Naming.BusNameToValidName(signal.Parent as AST.Bus) #>.<#= signal.Name #>(i) != parse_<#= eltype #>(token)) {
            std::stringstream sstm;
            sstm << "Error in cycle " << cycle << std::endl;
            sstm << "Expected value " << <#= typecast #>parse_<#= eltype #>(token) << ", but got " << <#= typecast #>bus_<#= Naming.BusNameToValidName(signal.Parent as AST.Bus) #>.<#= signal.Name #>(i) << " for field " << <#= Naming.AssemblyNameToFileName(Network) #>_SIGNAL_NAMES[field] << " (raw: " << token << ")" << std::endl;
            throw MessageException(sstm.str());
        }
        field++;
    }

<#     } else { #>
    if (!std::getline(valuestream, token, ',')) {
        std::stringstream sstm;
        sstm << "Unexpected end-of-line in cycle " << cycle << ", field " << field << std::endl;
        throw MessageException(sstm.str());
    }

    source_is_undef = false;
    try {
        <#= RS.TypeScope.GetType(signal).Name #> tmpval = bus_<#= Naming.BusNameToValidName(signal.Parent as AST.Bus) #>.<#= signal.Name #>();
    } catch (InvalidReadException e) {
        source_is_undef = true;
    }

    if (token.compare("U") == 0 && source_is_undef) {
        // Don't care
    } else if (token.compare("U") != 0 && bus_<#= Naming.BusNameToValidName(signal.Parent as AST.Bus) #>.<#= signal.Name #>() != parse_<#= RS.TypeScope.GetType(signal).Name #>(token)) {
        std::stringstream sstm;
        sstm << "Error in cycle " << cycle << std::endl;
        sstm << "Expected value " << <#= typecast #>parse_<#= RS.TypeScope.GetType(signal).Name #>(token) << ", but got " << <#= typecast #>bus_<#= Naming.BusNameToValidName(signal.Parent as AST.Bus) #>.<#= signal.Name #>() << " for field " << <#= Naming.AssemblyNameToFileName(Network) #>_SIGNAL_NAMES[field] << " (raw: " << token << ")" << std::endl;
        throw MessageException(sstm.str());
    }
    field++;
<#     } #>
<# } #>
}

void <#= Naming.AssemblyNameToFileName(Network) #>::Stop()
{
    if (trace_input != NULL) {
        trace_input->close();
        delete trace_input;
    }
}
