﻿<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="SME.AST" #>
#ifndef SME_<#= RSP.Process.Name.ToUpper() #>_HPP
#define SME_<#= RSP.Process.Name.ToUpper() #>_HPP

#include "SystemTypes.hpp"
#include "<#= Naming.SharedDefinitionsFileName(Network) #>"
#include "<#= Naming.BusDefinitionsFileName(Network) #>"

<#

var busses = RSP.Process.InputBusses.Concat(RSP.Process.OutputBusses).Concat(RSP.Process.InternalBusses).Distinct().OrderBy(x => x.Name).ToArray();
var members = RSP.Process.SharedVariables.Cast<DataElement>().Union(RSP.Process.SharedSignals).ToArray();
#>

class <#= RSP.Process.Name #> : public IProcess {
    // Insert additional private variables and methods here
    // #### USER-DATA-PRIVATE-START
    // #### USER-DATA-PRIVATE-END

private:
<# if (RSP.Process.SharedVariables.Any()) { #>
    // Shared variables
<#     foreach(var v in RSP.Process.SharedVariables) { #>
    <#= Type(v) #> <#= v.Name #>;
<#         if (v.MSCAType.IsArrayType()) { #>
    size_t size_<#= v.Name #>;
<#         } #>
<#     } #>

<# } #>
<# if (RSP.Process.SharedSignals.Any()) { #>
    // Shared signals
<#     foreach(var v in RSP.Process.SharedSignals) { #>
    <#= Type(v) #> <#= v.Name #>;
<#         if (v.MSCAType.IsArrayType()) { #>
    size_t size_<#= v.Name #>;
<#         } #>
<#     } #>

<# } #>
    // Bus pointers
<# foreach(var bus in busses) { #>
    <#= bus.Name #>* bus_<#= Naming.BusNameToValidName(bus, RSP.Process) #>;
<# } #>

<# if (RSP.Process.Methods != null && RSP.Process.Methods.Any(x => !x.Ignore)) { #>
    // Internal methods
<#     foreach (var s in RSP.Process.Methods.Where(x => !x.Ignore)) { #>
<#
           var rettype = (s.ReturnVariable == null || s.ReturnVariable.MSCAType.IsSameTypeReference(typeof(void))) ? "void" : Type(s.ReturnVariable);
#>
    <#= rettype #> <#= s.Name #>(<#= string.Join(", ", s.Parameters.Select(x => $"{Type(x)} {x.Name}")) #>);
<#     } #>
<# } #>

public:
    <#= RSP.Process.Name #>(
<#     foreach(var bus in busses) { #>
        <#= bus.Name #>* p<#= Naming.BusNameToValidName(bus, RSP.Process) #><#= (bus == busses.Last() && members.Length == 0) ? "" : "," #>
<#      } #>
<# foreach(var v in members) {
       var rt = RS.TypeScope.GetType(v);
       if (rt.IsArray) { #>
        size_t init_size_<#= v.Name #>,
<#     } #>
        const <#= Type(v) #> init_<#= v.Name #><#= v == members.Last() ? "" : "," #>
<#  } #>
    );

    void onTick();
};

#endif /* SME_<#= RSP.Process.Name.ToUpper() #>_HPP */
