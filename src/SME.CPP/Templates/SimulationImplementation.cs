//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SME.CPP.Templates {
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;


    public partial class SimulationImplementation : SimulationImplementationBase {

        public virtual string TransformText() {
            this.GenerationEnvironment = null;

            #line 1 ""
            this.Write("﻿");

            #line default
            #line hidden

            #line 6 ""
            this.Write("#include \"");

            #line default
            #line hidden

            #line 6 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( Naming.SimulatorFileName(Network) ));

            #line default
            #line hidden

            #line 6 ""
            this.Write(".hpp\"\n\n// The names of all signals\nstd::string ");

            #line default
            #line hidden

            #line 9 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( Naming.AssemblyNameToFileName(Network) ));

            #line default
            #line hidden

            #line 9 ""
            this.Write("_SIGNAL_NAMES[] = {\n");

            #line default
            #line hidden

            #line 10 ""
 foreach (var signal in RS.DriverSignals.Concat(RS.VerifySignals)) {
       var cpptype = RS.TypeScope.GetType(signal);
       if (cpptype.IsArray) {
           var eltype = cpptype.ElementName;
           var length = (int)RS.GetArrayLength(signal).DefaultValue;
           for(var i = 0; i < length; i++) {


            #line default
            #line hidden

            #line 17 ""
            this.Write("    \"");

            #line default
            #line hidden

            #line 17 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( RS.TestBenchSignalName(signal) ));

            #line default
            #line hidden

            #line 17 ""
            this.Write("(");

            #line default
            #line hidden

            #line 17 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( i ));

            #line default
            #line hidden

            #line 17 ""
            this.Write(")\",\n");

            #line default
            #line hidden

            #line 18 ""
         }

            #line default
            #line hidden

            #line 19 ""
     } else {

            #line default
            #line hidden

            #line 20 ""
            this.Write("    \"");

            #line default
            #line hidden

            #line 20 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( RS.TestBenchSignalName(signal) ));

            #line default
            #line hidden

            #line 20 ""
            this.Write("\",\n");

            #line default
            #line hidden

            #line 21 ""
     }

            #line default
            #line hidden

            #line 22 ""
 }

            #line default
            #line hidden

            #line 23 ""
            this.Write("};\n\n");

            #line default
            #line hidden

            #line 25 ""
 foreach(var process in Network.Processes) {
       var members = process
           .SharedVariables.Cast<AST.DataElement>()
           .Union(process.SharedSignals)
           //.Where(x => RS.TypeScope.GetType(x).IsArray)
           .Where(x => (x.DefaultValue is SME.AST.ArrayCreateExpression) || (x.DefaultValue is Array));
           foreach (var v in members) {
               var rt = RS.TypeScope.GetType(v);
               var eltype = rt.ElementName;
               var arraylen = RS.GetArrayLength(v).DefaultValue;


            #line default
            #line hidden

            #line 36 ""
            this.Write("const ");

            #line default
            #line hidden

            #line 36 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( eltype ));

            #line default
            #line hidden

            #line 36 ""
            this.Write(" init_");

            #line default
            #line hidden

            #line 36 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( Naming.ProcessNameToValidName(process) ));

            #line default
            #line hidden

            #line 36 ""
            this.Write("_");

            #line default
            #line hidden

            #line 36 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( Naming.ToValidName(v.Name) ));

            #line default
            #line hidden

            #line 36 ""
            this.Write("[");

            #line default
            #line hidden

            #line 36 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( arraylen ));

            #line default
            #line hidden

            #line 36 ""
            this.Write("] = ");

            #line default
            #line hidden

            #line 36 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( RS.Renderer.GetInitializer(v) ));

            #line default
            #line hidden

            #line 36 ""
            this.Write(";\n");

            #line default
            #line hidden

            #line 37 ""
     }

            #line default
            #line hidden

            #line 38 ""
 }

            #line default
            #line hidden

            #line 39 ""
            this.Write("\n\n");

            #line default
            #line hidden

            #line 41 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( Naming.AssemblyNameToFileName(Network) ));

            #line default
            #line hidden

            #line 41 ""
            this.Write("::");

            #line default
            #line hidden

            #line 41 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( Naming.AssemblyNameToFileName(Network) ));

            #line default
            #line hidden

            #line 41 ""
            this.Write("() \n    :\n");

            #line default
            #line hidden

            #line 43 ""
 foreach(var bus in Network.Busses) {

            #line default
            #line hidden

            #line 44 ""
            this.Write("        bus_");

            #line default
            #line hidden

            #line 44 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( Naming.BusNameToValidName(bus) ));

            #line default
            #line hidden

            #line 44 ""
            this.Write("(),\n");

            #line default
            #line hidden

            #line 45 ""
 }

            #line default
            #line hidden

            #line 46 ""
 foreach(var process in Network.Processes) {

       var busses = process.InputBusses.Concat(process.OutputBusses).Concat(process.InternalBusses).Distinct().OrderBy(x => x.Name).ToArray();
       var members = process.SharedVariables.Cast<AST.DataElement>().Union(process.SharedSignals).ToArray();


            #line default
            #line hidden

            #line 51 ""
            this.Write("        proc_");

            #line default
            #line hidden

            #line 51 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( Naming.ProcessNameToValidName(process) ));

            #line default
            #line hidden

            #line 51 ""
            this.Write("(\n");

            #line default
            #line hidden

            #line 52 ""
 foreach(var bus in busses) {

            #line default
            #line hidden

            #line 53 ""
            this.Write("            &bus_");

            #line default
            #line hidden

            #line 53 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( Naming.BusNameToValidName(bus) ));

            #line default
            #line hidden

            #line 53 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( (bus == busses.Last() & members.Length == 0) ? "" : ", " ));

            #line default
            #line hidden

            #line 53 ""
            this.Write("\n");

            #line default
            #line hidden

            #line 54 ""
 }

            #line default
            #line hidden

            #line 55 ""
 foreach(var v in members) {
       var initializer = RS.Renderer.GetInitializer(v);
       if (!string.IsNullOrWhiteSpace(initializer)) {
           var rt = RS.TypeScope.GetType(v);
           if (rt.IsArray) {
               var eltype = rt.ElementName;
               var arraylen = RS.GetArrayLength(v).DefaultValue;



            #line default
            #line hidden

            #line 64 ""
            this.Write("            ");

            #line default
            #line hidden

            #line 64 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( arraylen ));

            #line default
            #line hidden

            #line 64 ""
            this.Write(",\n");

            #line default
            #line hidden

            #line 65 ""


               if ((v.DefaultValue is SME.AST.ArrayCreateExpression) || v.DefaultValue is Array) {

            #line default
            #line hidden

            #line 68 ""
            this.Write("            init_");

            #line default
            #line hidden

            #line 68 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( Naming.ProcessNameToValidName(process) ));

            #line default
            #line hidden

            #line 68 ""
            this.Write("_");

            #line default
            #line hidden

            #line 68 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( Naming.ToValidName(v.Name) ));

            #line default
            #line hidden

            #line 68 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( v == members.Last() ? "" : "," ));

            #line default
            #line hidden

            #line 68 ""
            this.Write("\n");

            #line default
            #line hidden

            #line 69 ""
             } else {

            #line default
            #line hidden

            #line 70 ""
            this.Write("            new ");

            #line default
            #line hidden

            #line 70 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( eltype ));

            #line default
            #line hidden

            #line 70 ""
            this.Write("[");

            #line default
            #line hidden

            #line 70 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( arraylen ));

            #line default
            #line hidden

            #line 70 ""
            this.Write("]()");

            #line default
            #line hidden

            #line 70 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( v == members.Last() ? "" : "," ));

            #line default
            #line hidden

            #line 70 ""
            this.Write("\n");

            #line default
            #line hidden

            #line 71 ""
             }

            #line default
            #line hidden

            #line 72 ""
         } else {

            #line default
            #line hidden

            #line 73 ""
            this.Write("            ");

            #line default
            #line hidden

            #line 73 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( initializer ));

            #line default
            #line hidden

            #line 73 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( v == members.Last() ? "" : "," ));

            #line default
            #line hidden

            #line 73 ""
            this.Write("\n");

            #line default
            #line hidden

            #line 74 ""
         }

            #line default
            #line hidden

            #line 75 ""
     }

            #line default
            #line hidden

            #line 76 ""
 }

            #line default
            #line hidden

            #line 77 ""
            this.Write("        ),\n");

            #line default
            #line hidden

            #line 78 ""
 }

            #line default
            #line hidden

            #line 79 ""
            this.Write("        trace_input(NULL),\n        input_line(),\n        cycle(0)\n{\n\n}\n\nsize_t ");

            #line default
            #line hidden

            #line 86 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( Naming.AssemblyNameToFileName(Network) ));

            #line default
            #line hidden

            #line 86 ""
            this.Write(@"::RunSimulation(const char* inputfile)
{
    LoadTraceInput(inputfile);

    // Ignore the reset cycle
    DriveFromTraceInput();

    while(true) {
        if (!DriveFromTraceInput()) {
            size_t res = cycle;
            Stop();
            return res;
        }
        OnTick();
        VerifyTrace();
        FinishCycle();
    }
}

void ");

            #line default
            #line hidden

            #line 105 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( Naming.AssemblyNameToFileName(Network) ));

            #line default
            #line hidden

            #line 105 ""
            this.Write(@"::LoadTraceInput(const char* inputfile)
{
    if (trace_input != NULL)
       throw MessageException(""Already have an input trace file open"");

    // Open the trace file and validate the headers
    trace_input = new std::ifstream(inputfile);
    if (trace_input->bad()) {
        trace_input->close();
        throw MessageException(""Trace input file not found, or not able to open"");
    }

    if (!std::getline(*trace_input, input_line)) {
        throw MessageException(""Trace input file was empty"");
    }

    if (cycle != 0) {
        throw MessageException(""Cannot load input file after the simulation has started"");
    }

    std::string token;
    std::istringstream headerlinestream(input_line);
    size_t field = 0;
    while(std::getline(headerlinestream, token, ',')) {
        if (token.compare(");

            #line default
            #line hidden

            #line 129 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( Naming.AssemblyNameToFileName(Network) ));

            #line default
            #line hidden

            #line 129 ""
            this.Write("_SIGNAL_NAMES[field]) != 0) {\n\n            std::stringstream sstm;\n            ss" +
                    "tm << \"Field #\" << field << \" should be named \" << ");

            #line default
            #line hidden

            #line 132 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( Naming.AssemblyNameToFileName(Network) ));

            #line default
            #line hidden

            #line 132 ""
            this.Write("_SIGNAL_NAMES[field] << \" but is named \" << token << \", the trace file cannot be " +
                    "used\";\n            throw MessageException(sstm.str());\n        }\n        field++" +
                    ";\n    }\n\n    cycle = 0;\n}\n\n");

            #line default
            #line hidden

            #line 141 ""
 var driver_signal_count = 0;

            #line default
            #line hidden

            #line 142 ""
            this.Write("\nbool ");

            #line default
            #line hidden

            #line 143 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( Naming.AssemblyNameToFileName(Network) ));

            #line default
            #line hidden

            #line 143 ""
            this.Write(@"::DriveFromTraceInput()
{
    if (trace_input == NULL) {
        throw MessageException(""Trace input file is not loaded"");
    }

    if (!std::getline(*trace_input, input_line)) {
        return false;
    }

    size_t i;
    std::string token;
    std::istringstream valuestream(input_line);
    size_t field = 0;

");

            #line default
            #line hidden

            #line 158 ""
  foreach (var signal in RS.DriverSignals) {
       var cpptype = RS.TypeScope.GetType(signal);
       if (cpptype.IsArray) {
           var eltype = cpptype.ElementName;
           var length = (int)RS.GetArrayLength(signal).DefaultValue;
           driver_signal_count += length;


            #line default
            #line hidden

            #line 165 ""
            this.Write("    for (i = 0; i < ");

            #line default
            #line hidden

            #line 165 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( length ));

            #line default
            #line hidden

            #line 165 ""
            this.Write("; i++) {\n        if (!std::getline(valuestream, token, \',\')) {\n            std::s" +
                    "tringstream sstm;\n            sstm << \"Unexpected end-of-line in cycle \" << cycl" +
                    "e << \", field \" << field << \", ");

            #line default
            #line hidden

            #line 168 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Name ));

            #line default
            #line hidden

            #line 168 ""
            this.Write("[\" << i << \"]\" << std::endl;\n            throw MessageException(sstm.str());\n    " +
                    "    }\n        if (token.compare(\"U\") != 0)\n            bus_");

            #line default
            #line hidden

            #line 172 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( Naming.BusNameToValidName(signal.Parent as AST.Bus) ));

            #line default
            #line hidden

            #line 172 ""
            this.Write(".");

            #line default
            #line hidden

            #line 172 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Name ));

            #line default
            #line hidden

            #line 172 ""
            this.Write("(i, parse_");

            #line default
            #line hidden

            #line 172 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( eltype ));

            #line default
            #line hidden

            #line 172 ""
            this.Write("(token));            \n        field++;\n    }\n");

            #line default
            #line hidden

            #line 175 ""

       } else {
           driver_signal_count++;


            #line default
            #line hidden

            #line 179 ""
            this.Write("    if (!std::getline(valuestream, token, \',\')) {\n        std::stringstream sstm;" +
                    "\n        sstm << \"Unexpected end-of-line in cycle \" << cycle << \", field \" << fi" +
                    "eld << \", ");

            #line default
            #line hidden

            #line 181 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Name ));

            #line default
            #line hidden

            #line 181 ""
            this.Write("[\" << i << \"]\" << std::endl;\n        throw MessageException(sstm.str());\n    }\n  " +
                    "  if (token.compare(\"U\") != 0)\n        bus_");

            #line default
            #line hidden

            #line 185 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( Naming.BusNameToValidName(signal.Parent as AST.Bus) ));

            #line default
            #line hidden

            #line 185 ""
            this.Write(".");

            #line default
            #line hidden

            #line 185 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Name ));

            #line default
            #line hidden

            #line 185 ""
            this.Write("(parse_");

            #line default
            #line hidden

            #line 185 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( RS.TypeScope.GetType(signal).Name ));

            #line default
            #line hidden

            #line 185 ""
            this.Write("(token));\n    field++;\n");

            #line default
            #line hidden

            #line 187 ""
     }

            #line default
            #line hidden

            #line 188 ""
            this.Write("\n");

            #line default
            #line hidden

            #line 189 ""
 }

            #line default
            #line hidden

            #line 190 ""
            this.Write("\n    return true;\n}\n\nvoid ");

            #line default
            #line hidden

            #line 194 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( Naming.AssemblyNameToFileName(Network) ));

            #line default
            #line hidden

            #line 194 ""
            this.Write("::FinishCycle() \n{\n    cycle++;\n");

            #line default
            #line hidden

            #line 197 ""
 if (Network.Busses.Any(x => x.IsClocked)) {

            #line default
            #line hidden

            #line 198 ""
            this.Write("        // Propagate clocked busses\n");

            #line default
            #line hidden

            #line 199 ""
     foreach(var bus in Network.Busses.Where(x => x.IsClocked)) {

            #line default
            #line hidden

            #line 200 ""
            this.Write("        bus_");

            #line default
            #line hidden

            #line 200 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( bus.Name ));

            #line default
            #line hidden

            #line 200 ""
            this.Write(".Propagate();\n");

            #line default
            #line hidden

            #line 201 ""
     }

            #line default
            #line hidden

            #line 202 ""
 }

            #line default
            #line hidden

            #line 203 ""
            this.Write("}\n\nvoid ");

            #line default
            #line hidden

            #line 205 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( Naming.AssemblyNameToFileName(Network) ));

            #line default
            #line hidden

            #line 205 ""
            this.Write("::OnTick()\n{\n\n");

            #line default
            #line hidden

            #line 208 ""
     foreach(var p in Network.Processes.Where(x => x.IsClocked).Distinct()) {

            #line default
            #line hidden

            #line 209 ""
            this.Write("    proc_");

            #line default
            #line hidden

            #line 209 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( Naming.ProcessNameToValidName(p) ));

            #line default
            #line hidden

            #line 209 ""
            this.Write(".onTick();\n");

            #line default
            #line hidden

            #line 210 ""
     }

            #line default
            #line hidden

            #line 211 ""
     foreach(var b in Network.Busses.Where(x => x.IsClocked).Distinct()) {

            #line default
            #line hidden

            #line 212 ""
            this.Write("    bus_");

            #line default
            #line hidden

            #line 212 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( Naming.BusNameToValidName(b) ));

            #line default
            #line hidden

            #line 212 ""
            this.Write(".propagate_signals();\n");

            #line default
            #line hidden

            #line 213 ""
     }

            #line default
            #line hidden

            #line 214 ""
            this.Write("\n\n");

            #line default
            #line hidden

            #line 216 ""
 foreach(var n in Graph.ExecutionPlan) {
       var pn = GetProcess(n.Item);
       if (pn != null && !pn.IsClocked) {


            #line default
            #line hidden

            #line 220 ""
            this.Write("    proc_");

            #line default
            #line hidden

            #line 220 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( Naming.ProcessNameToValidName(pn) ));

            #line default
            #line hidden

            #line 220 ""
            this.Write(".onTick();\n");

            #line default
            #line hidden

            #line 221 ""
     }

            #line default
            #line hidden

            #line 222 ""
     foreach(var b in n.Item.OutputBusses.SelectMany(x => x).Distinct()) {

            #line default
            #line hidden

            #line 223 ""
            this.Write("    bus_");

            #line default
            #line hidden

            #line 223 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( Naming.BusNameToValidName(GetBus(b)) ));

            #line default
            #line hidden

            #line 223 ""
            this.Write(".forward_signals();\n");

            #line default
            #line hidden

            #line 224 ""
     }

            #line default
            #line hidden

            #line 225 ""
     foreach(var b in n.PropagateAfter) {

            #line default
            #line hidden

            #line 226 ""
            this.Write("    bus_");

            #line default
            #line hidden

            #line 226 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( Naming.BusNameToValidName(GetBus(b)) ));

            #line default
            #line hidden

            #line 226 ""
            this.Write(".propagate_signals();\n");

            #line default
            #line hidden

            #line 227 ""
     }

            #line default
            #line hidden

            #line 228 ""
     foreach(var b in n.Item.InternalBusses.SelectMany(x => x)) {

            #line default
            #line hidden

            #line 229 ""
            this.Write("    bus_");

            #line default
            #line hidden

            #line 229 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( Naming.BusNameToValidName(GetBus(b)) ));

            #line default
            #line hidden

            #line 229 ""
            this.Write(".forward_signals();\n    bus_");

            #line default
            #line hidden

            #line 230 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( Naming.BusNameToValidName(GetBus(b)) ));

            #line default
            #line hidden

            #line 230 ""
            this.Write(".propagate_signals();\n");

            #line default
            #line hidden

            #line 231 ""
     }

            #line default
            #line hidden

            #line 232 ""
 }

            #line default
            #line hidden

            #line 233 ""
            this.Write("}\n\nvoid ");

            #line default
            #line hidden

            #line 235 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( Naming.AssemblyNameToFileName(Network) ));

            #line default
            #line hidden

            #line 235 ""
            this.Write("::VerifyTrace()\n{\n    if (trace_input == NULL) {\n        throw MessageException(\"" +
                    "Trace input file is not loaded\");\n    }\n\n    size_t i;\n    size_t field = 0;\n   " +
                    " std::string token;\n    std::istringstream valuestream(input_line);\n\n    // Forw" +
                    "ard past the ");

            #line default
            #line hidden

            #line 246 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( driver_signal_count ));

            #line default
            #line hidden

            #line 246 ""
            this.Write(" signals\n    for(i = 0; i < ");

            #line default
            #line hidden

            #line 247 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( driver_signal_count ));

            #line default
            #line hidden

            #line 247 ""
            this.Write("; i++) {\n        if (!std::getline(valuestream, token, \',\')) {\n            throw " +
                    "MessageException(\"Unexpected end-of-stream\");\n        }\n        field++;\n    }\n\n" +
                    "    bool source_is_undef;\n\n");

            #line default
            #line hidden

            #line 256 ""
 foreach (var signal in RS.VerifySignals) {
       var cpptype = RS.TypeScope.GetType(signal);
       var typecast = cpptype.Name == "system_uint8" ? "(int)" : "";
       if (cpptype.IsArray) {
           typecast = cpptype.ElementName == "system_uint8" ? "(int)" : "";
           var eltype = cpptype.ElementName;
           var length = (int)RS.GetArrayLength(signal).DefaultValue;


            #line default
            #line hidden

            #line 264 ""
            this.Write("    for (i = 0; i < ");

            #line default
            #line hidden

            #line 264 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( length ));

            #line default
            #line hidden

            #line 264 ""
            this.Write(@"; i++) {
        if (!std::getline(valuestream, token, ',')) {
            std::stringstream sstm;
            sstm << ""Unexpected end-of-line in cycle "" << cycle << "", field "" << field << std::endl;
            throw MessageException(sstm.str());
        }

        source_is_undef = false;
        try {
            ");

            #line default
            #line hidden

            #line 273 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( eltype ));

            #line default
            #line hidden

            #line 273 ""
            this.Write(" tmpval = bus_");

            #line default
            #line hidden

            #line 273 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( Naming.BusNameToValidName(signal.Parent as AST.Bus) ));

            #line default
            #line hidden

            #line 273 ""
            this.Write(".");

            #line default
            #line hidden

            #line 273 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Name ));

            #line default
            #line hidden

            #line 273 ""
            this.Write("(i);\n        } catch (InvalidReadException e) {\n            source_is_undef = tru" +
                    "e;\n        }\n\n        if (token.compare(\"U\") == 0 && source_is_undef) {\n        " +
                    " // Don\'t care\n        } else if (token.compare(\"U\") != 0 && bus_");

            #line default
            #line hidden

            #line 280 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( Naming.BusNameToValidName(signal.Parent as AST.Bus) ));

            #line default
            #line hidden

            #line 280 ""
            this.Write(".");

            #line default
            #line hidden

            #line 280 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Name ));

            #line default
            #line hidden

            #line 280 ""
            this.Write("(i) != parse_");

            #line default
            #line hidden

            #line 280 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( eltype ));

            #line default
            #line hidden

            #line 280 ""
            this.Write("(token)) {\n            std::stringstream sstm;\n            sstm << \"Error in cycl" +
                    "e \" << cycle << std::endl;\n            sstm << \"Expected value \" << ");

            #line default
            #line hidden

            #line 283 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( typecast ));

            #line default
            #line hidden

            #line 283 ""
            this.Write("parse_");

            #line default
            #line hidden

            #line 283 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( eltype ));

            #line default
            #line hidden

            #line 283 ""
            this.Write("(token) << \", but got \" << ");

            #line default
            #line hidden

            #line 283 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( typecast ));

            #line default
            #line hidden

            #line 283 ""
            this.Write("bus_");

            #line default
            #line hidden

            #line 283 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( Naming.BusNameToValidName(signal.Parent as AST.Bus) ));

            #line default
            #line hidden

            #line 283 ""
            this.Write(".");

            #line default
            #line hidden

            #line 283 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Name ));

            #line default
            #line hidden

            #line 283 ""
            this.Write("(i) << \" for field \" << ");

            #line default
            #line hidden

            #line 283 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( Naming.AssemblyNameToFileName(Network) ));

            #line default
            #line hidden

            #line 283 ""
            this.Write("_SIGNAL_NAMES[field] << \" (raw: \" << token << \")\" << std::endl;\n            throw" +
                    " MessageException(sstm.str());\n        }\n        field++;\n    }\n\n");

            #line default
            #line hidden

            #line 289 ""
     } else {

            #line default
            #line hidden

            #line 290 ""
            this.Write(@"    if (!std::getline(valuestream, token, ',')) {
        std::stringstream sstm;
        sstm << ""Unexpected end-of-line in cycle "" << cycle << "", field "" << field << std::endl;
        throw MessageException(sstm.str());
    }

    source_is_undef = false;
    try {
        ");

            #line default
            #line hidden

            #line 298 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( RS.TypeScope.GetType(signal).Name ));

            #line default
            #line hidden

            #line 298 ""
            this.Write(" tmpval = bus_");

            #line default
            #line hidden

            #line 298 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( Naming.BusNameToValidName(signal.Parent as AST.Bus) ));

            #line default
            #line hidden

            #line 298 ""
            this.Write(".");

            #line default
            #line hidden

            #line 298 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Name ));

            #line default
            #line hidden

            #line 298 ""
            this.Write("();\n    } catch (InvalidReadException e) {\n        source_is_undef = true;\n    }\n" +
                    "\n    if (token.compare(\"U\") == 0 && source_is_undef) {\n        // Don\'t care\n   " +
                    " } else if (token.compare(\"U\") != 0 && bus_");

            #line default
            #line hidden

            #line 305 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( Naming.BusNameToValidName(signal.Parent as AST.Bus) ));

            #line default
            #line hidden

            #line 305 ""
            this.Write(".");

            #line default
            #line hidden

            #line 305 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Name ));

            #line default
            #line hidden

            #line 305 ""
            this.Write("() != parse_");

            #line default
            #line hidden

            #line 305 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( RS.TypeScope.GetType(signal).Name ));

            #line default
            #line hidden

            #line 305 ""
            this.Write("(token)) {\n        std::stringstream sstm;\n        sstm << \"Error in cycle \" << c" +
                    "ycle << std::endl;\n        sstm << \"Expected value \" << ");

            #line default
            #line hidden

            #line 308 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( typecast ));

            #line default
            #line hidden

            #line 308 ""
            this.Write("parse_");

            #line default
            #line hidden

            #line 308 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( RS.TypeScope.GetType(signal).Name ));

            #line default
            #line hidden

            #line 308 ""
            this.Write("(token) << \", but got \" << ");

            #line default
            #line hidden

            #line 308 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( typecast ));

            #line default
            #line hidden

            #line 308 ""
            this.Write("bus_");

            #line default
            #line hidden

            #line 308 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( Naming.BusNameToValidName(signal.Parent as AST.Bus) ));

            #line default
            #line hidden

            #line 308 ""
            this.Write(".");

            #line default
            #line hidden

            #line 308 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( signal.Name ));

            #line default
            #line hidden

            #line 308 ""
            this.Write("() << \" for field \" << ");

            #line default
            #line hidden

            #line 308 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( Naming.AssemblyNameToFileName(Network) ));

            #line default
            #line hidden

            #line 308 ""
            this.Write("_SIGNAL_NAMES[field] << \" (raw: \" << token << \")\" << std::endl;\n        throw Mes" +
                    "sageException(sstm.str());\n    }\n    field++;\n");

            #line default
            #line hidden

            #line 312 ""
     }

            #line default
            #line hidden

            #line 313 ""
 }

            #line default
            #line hidden

            #line 314 ""
            this.Write("}\n\nvoid ");

            #line default
            #line hidden

            #line 316 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( Naming.AssemblyNameToFileName(Network) ));

            #line default
            #line hidden

            #line 316 ""
            this.Write("::Stop()\n{\n    if (trace_input != NULL) {\n        trace_input->close();\n        d" +
                    "elete trace_input;\n    }\n}\n");

            #line default
            #line hidden
            return this.GenerationEnvironment.ToString();
        }

        public virtual void Initialize() {
        }
    }

    public class SimulationImplementationBase {

        private global::System.Text.StringBuilder builder;

        private global::System.Collections.Generic.IDictionary<string, object> session;

        private global::System.CodeDom.Compiler.CompilerErrorCollection errors;

        private string currentIndent = string.Empty;

        private global::System.Collections.Generic.Stack<int> indents;

        private ToStringInstanceHelper _toStringHelper = new ToStringInstanceHelper();

        public virtual global::System.Collections.Generic.IDictionary<string, object> Session {
            get {
                return this.session;
            }
            set {
                this.session = value;
            }
        }

        public global::System.Text.StringBuilder GenerationEnvironment {
            get {
                if ((this.builder == null)) {
                    this.builder = new global::System.Text.StringBuilder();
                }
                return this.builder;
            }
            set {
                this.builder = value;
            }
        }

        protected global::System.CodeDom.Compiler.CompilerErrorCollection Errors {
            get {
                if ((this.errors == null)) {
                    this.errors = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errors;
            }
        }

        public string CurrentIndent {
            get {
                return this.currentIndent;
            }
        }

        private global::System.Collections.Generic.Stack<int> Indents {
            get {
                if ((this.indents == null)) {
                    this.indents = new global::System.Collections.Generic.Stack<int>();
                }
                return this.indents;
            }
        }

        public ToStringInstanceHelper ToStringHelper {
            get {
                return this._toStringHelper;
            }
        }

        public void Error(string message) {
            this.Errors.Add(new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message));
        }

        public void Warning(string message) {
            global::System.CodeDom.Compiler.CompilerError val = new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message);
            val.IsWarning = true;
            this.Errors.Add(val);
        }

        public string PopIndent() {
            if ((this.Indents.Count == 0)) {
                return string.Empty;
            }
            int lastPos = (this.currentIndent.Length - this.Indents.Pop());
            string last = this.currentIndent.Substring(lastPos);
            this.currentIndent = this.currentIndent.Substring(0, lastPos);
            return last;
        }

        public void PushIndent(string indent) {
            this.Indents.Push(indent.Length);
            this.currentIndent = (this.currentIndent + indent);
        }

        public void ClearIndent() {
            this.currentIndent = string.Empty;
            this.Indents.Clear();
        }

        public void Write(string textToAppend) {
            this.GenerationEnvironment.Append(textToAppend);
        }

        public void Write(string format, params object[] args) {
            this.GenerationEnvironment.AppendFormat(format, args);
        }

        public void WriteLine(string textToAppend) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendLine(textToAppend);
        }

        public void WriteLine(string format, params object[] args) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendFormat(format, args);
            this.GenerationEnvironment.AppendLine();
        }

        public class ToStringInstanceHelper {

            private global::System.IFormatProvider formatProvider = global::System.Globalization.CultureInfo.InvariantCulture;

            public global::System.IFormatProvider FormatProvider {
                get {
                    return this.formatProvider;
                }
                set {
                    if ((value != null)) {
                        this.formatProvider = value;
                    }
                }
            }

            public string ToStringWithCulture(object objectToConvert) {
                if ((objectToConvert == null)) {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                global::System.Type type = objectToConvert.GetType();
                global::System.Type iConvertibleType = typeof(global::System.IConvertible);
                if (iConvertibleType.IsAssignableFrom(type)) {
                    return ((global::System.IConvertible)(objectToConvert)).ToString(this.formatProvider);
                }
                global::System.Reflection.MethodInfo methInfo = type.GetMethod("ToString", new global::System.Type[] {
                            iConvertibleType});
                if ((methInfo != null)) {
                    return ((string)(methInfo.Invoke(objectToConvert, new object[] {
                                this.formatProvider})));
                }
                return objectToConvert.ToString();
            }
        }
    }
}
