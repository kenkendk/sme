<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="SME" #>
<#@ import namespace="SME.VHDL" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="SME.AST" #>
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;

-- library SYSTEM_TYPES;
use work.SYSTEM_TYPES.ALL;

-- library CUSTOM_TYPES;
use work.CUSTOM_TYPES.ALL;

-- User defined packages here
-- #### USER-DATA-IMPORTS-START
-- #### USER-DATA-IMPORTS-END

entity <#= Network.Name #>_export is
  port(

<# foreach (var bus in Network.Busses.Where(x => x.IsTopLevelInput || x.IsTopLevelOutput)) {
	var signaltype = "inout"; 

	if (bus.IsTopLevelInput && !bus.IsTopLevelOutput)
		signaltype = "in";
	else if (bus.IsTopLevelOutput && !bus.IsTopLevelInput)
		signaltype = "out";
	#>
    -- Top-level bus <#= bus.Name #> signals
<#     foreach (var signal in bus.Signals) { #>
    <#= bus.InstanceName #>_<#= signal.Name #>: <#= signaltype #> <#= RS.VHDLExportTypeName(signal) #>;
<#     } #>

<# } #>

    -- User defined signals here
    -- #### USER-DATA-ENTITYSIGNALS-START
    -- #### USER-DATA-ENTITYSIGNALS-END


    -- Enable signal
    ENB : in STD_LOGIC;

	-- Reset signal
    RST : in STD_LOGIC;

    -- Finished signal
    FIN : out Std_logic;

    -- Clock signal
    CLK : in STD_LOGIC
  );
end <#= Network.Name #>_export;


<#
var converted_outputs = new HashSet<AST.Signal>();

foreach (var bus in Network.Busses.Where(x => x.IsTopLevelOutput && !x.IsTopLevelInput)) 
{ 
    foreach(var signal in bus.Signals) 
    {
        var vt = RS.VHDLType(signal);
        if (vt.IsSigned || vt.IsUnsigned) 
        {
            converted_outputs.Add(signal);
        }
    }
}
#>

architecture RTL of <#= Network.Name #>_export is  
  -- User defined signals here
  -- #### USER-DATA-SIGNALS-START
  -- #### USER-DATA-SIGNALS-END

<# if (converted_outputs.Count > 0) { #>
  -- Intermediate conversion signal to convert internal types to external ones
<#     foreach(var signal in converted_outputs) { #>
  signal tmp_<#= ((AST.Bus)signal.Parent).InstanceName #>_<#= signal.Name #> : <#= RS.VHDLWrappedTypeName(signal) #>;
<#     } #>
<# } #>

begin
<# if (converted_outputs.Count > 0) { #>

    -- Carry converted signals from entity to wrapped outputs
<#     foreach(var signal in converted_outputs) { #>
  <#= ((AST.Bus)signal.Parent).InstanceName #>_<#= signal.Name #> <= std_logic_vector(tmp_<#= ((AST.Bus)signal.Parent).InstanceName #>_<#= signal.Name #>);
<#     } #>
<# } #>

    -- Entity <#= Network.Name #> signals
    <#= Network.Name #>: entity work.<#= Network.Name #>
    port map (
<#    foreach (var bus in Network.Busses.Where(x => x.IsTopLevelInput || x.IsTopLevelOutput)) { 
	      var type = "Input/Output"; 

	      if (bus.IsTopLevelInput && !bus.IsTopLevelOutput)
		      type = "Input";
	      else if (bus.IsTopLevelOutput && !bus.IsTopLevelInput)
		      type = "Output";
	#>
        -- <#= type #> bus <#= bus.Name #>
<#		  foreach(var signal in bus.Signals) {
              var vt = RS.VHDLType(signal);
#>
<#            if (converted_outputs.Contains(signal)) { #>
        <#= bus.InstanceName #>_<#= signal.Name #> => tmp_<#= bus.InstanceName #>_<#= signal.Name #>,
<#            } else if (vt.IsUnsigned) { #>
        <#= bus.InstanceName #>_<#= signal.Name #> => unsigned(<#= bus.InstanceName #>_<#= signal.Name #>),
<#            } else if (vt.IsSigned) { #>
        <#= bus.InstanceName #>_<#= signal.Name #> => signed(<#= bus.InstanceName #>_<#= signal.Name #>),
<#            } else { #>
        <#= bus.InstanceName #>_<#= signal.Name #> => <#= bus.InstanceName #>_<#= signal.Name #>,
<#            } #>
<#        } #>

<#    } #>
        ENB => ENB,
        RST => RST,
        FIN => FIN,
        CLK => CLK
    );

-- User defined processes here
-- #### USER-DATA-CODE-START
-- #### USER-DATA-CODE-END

end RTL;