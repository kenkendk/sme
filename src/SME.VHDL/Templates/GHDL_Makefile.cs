//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SME.VHDL.Templates {
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    
    public partial class GHDL_Makefile : GHDL_MakefileBase {
        
        public virtual string TransformText() {
            this.GenerationEnvironment = null;
            
            #line 1 ""
            this.Write("﻿");
            
            #line default
            #line hidden
            
            #line 6 ""
            this.Write("all: test export\n\ntestbench: ");
            
            #line default
            #line hidden
            
            #line 8 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( RS.Network.Name.ToLower() ));
            
            #line default
            #line hidden
            
            #line 8 ""
            this.Write("_tb\nexport: ");
            
            #line default
            #line hidden
            
            #line 9 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( RS.Network.Name ));
            
            #line default
            #line hidden
            
            #line 9 ""
            this.Write(@"_export
build: export testbench

# Use a temporary folder for compiled stuff
WORKDIR=work

# All code should be VHDL93 compliant, 
# but 93c is a bit easier to work with
STD=93c

# Eveything should compile with clean IEEE,
# but the test-bench and CSV util's require
# std_logic_textio from Synopsys
IEEE=synopsys

# VCD trace file for GTKWave
VCDFILE=trace.vcd

# Disable the 'Warning: redundant others'
FLAGS=--warn-no-others

");
            
            #line default
            #line hidden
            
            #line 27 ""

var cust_tag = CustomFiles == null || CustomFiles.Count() == 0 ? "" : " custom_files";

            
            #line default
            #line hidden
            
            #line 30 ""
            this.Write("\n");
            
            #line default
            #line hidden
            
            #line 31 ""
 if (!string.IsNullOrEmpty(cust_tag)) { 
            
            #line default
            #line hidden
            
            #line 32 ""
            this.Write("custom_files: $(WORKDIR) ");
            
            #line default
            #line hidden
            
            #line 32 ""
 foreach(var file in CustomFiles) { 
            
            #line default
            #line hidden
            
            #line 33 ""
            this.Write("$(WORKDIR)/");
            
            #line default
            #line hidden
            
            #line 33 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( file ));
            
            #line default
            #line hidden
            
            #line 33 ""
            this.Write(".o ");
            
            #line default
            #line hidden
            
            #line 33 ""
 } 
            
            #line default
            #line hidden
            
            #line 34 ""
            this.Write("\n");
            
            #line default
            #line hidden
            
            #line 35 ""
 } 
            
            #line default
            #line hidden
            
            #line 36 ""
            this.Write("\n$(WORKDIR):\n\tmkdir $(WORKDIR)\n\n$(WORKDIR)/system_types.o: system_types.vhdl $(WO" +
                    "RKDIR)\n\tghdl -a --std=$(STD) --ieee=$(IEEE) --workdir=$(WORKDIR) $(FLAGS) system_types.vh" +
                    "dl\n\n$(WORKDIR)/Types_");
            
            #line default
            #line hidden
            
            #line 43 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( RS.Network.Name ));
            
            #line default
            #line hidden
            
            #line 43 ""
            this.Write(".o: Types_");
            
            #line default
            #line hidden
            
            #line 43 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( RS.Network.Name ));
            
            #line default
            #line hidden
            
            #line 43 ""
            this.Write(".vhdl $(WORKDIR)\n\tghdl -a --std=$(STD) --ieee=$(IEEE) --workdir=$(WORKDIR) $(FLAGS) Types_" +
                    "");
            
            #line default
            #line hidden
            
            #line 44 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( RS.Network.Name ));
            
            #line default
            #line hidden
            
            #line 44 ""
            this.Write(".vhdl\n\n");
            
            #line default
            #line hidden
            
            #line 46 ""
 foreach (var file in Filenames) { 
            
            #line default
            #line hidden
            
            #line 47 ""
            this.Write("$(WORKDIR)/");
            
            #line default
            #line hidden
            
            #line 47 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( file ));
            
            #line default
            #line hidden
            
            #line 47 ""
            this.Write(".o: ");
            
            #line default
            #line hidden
            
            #line 47 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( file ));
            
            #line default
            #line hidden
            
            #line 47 ""
            this.Write(".vhdl $(WORKDIR)/system_types.o $(WORKDIR)/Types_");
            
            #line default
            #line hidden
            
            #line 47 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( RS.Network.Name ));
            
            #line default
            #line hidden
            
            #line 47 ""
            this.Write(".o $(WORKDIR)");
            
            #line default
            #line hidden
            
            #line 47 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( cust_tag ));
            
            #line default
            #line hidden
            
            #line 47 ""
            this.Write("\n\tghdl -a --std=$(STD) --ieee=$(IEEE) --workdir=$(WORKDIR) $(FLAGS) ");
            
            #line default
            #line hidden
            
            #line 48 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( file ));
            
            #line default
            #line hidden
            
            #line 48 ""
            this.Write(".vhdl\n");
            
            #line default
            #line hidden
            
            #line 49 ""
 } 
            
            #line default
            #line hidden
            
            #line 50 ""
            this.Write("\n");
            
            #line default
            #line hidden
            
            #line 51 ""
 if (!string.IsNullOrEmpty(cust_tag)) { 
            
            #line default
            #line hidden
            
            #line 52 ""
     foreach (var file in CustomFiles) { 
            
            #line default
            #line hidden
            
            #line 53 ""
            this.Write("$(WORKDIR)/");
            
            #line default
            #line hidden
            
            #line 53 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( file ));
            
            #line default
            #line hidden
            
            #line 53 ""
            this.Write(".o: ");
            
            #line default
            #line hidden
            
            #line 53 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( file ));
            
            #line default
            #line hidden
            
            #line 53 ""
            this.Write(".vhdl $(WORKDIR)/system_types.o $(WORKDIR)/Types_");
            
            #line default
            #line hidden
            
            #line 53 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( RS.Network.Name ));
            
            #line default
            #line hidden
            
            #line 53 ""
            this.Write(".o $(WORKDIR)\n\tghdl -a --std=$(STD) --ieee=$(IEEE) --workdir=$(WORKDIR) $(FLAGS) ");
            
            #line default
            #line hidden
            
            #line 54 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( file ));
            
            #line default
            #line hidden
            
            #line 54 ""
            this.Write(".vhdl\n");
            
            #line default
            #line hidden
            
            #line 55 ""
     } 
            
            #line default
            #line hidden
            
            #line 56 ""
 } 
            
            #line default
            #line hidden
            
            #line 57 ""
            this.Write("\n\n$(WORKDIR)/");
            
            #line default
            #line hidden
            
            #line 59 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( RS.Network.Name ));
            
            #line default
            #line hidden
            
            #line 59 ""
            this.Write(".o: ");
            
            #line default
            #line hidden
            
            #line 59 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( RS.Network.Name ));
            
            #line default
            #line hidden
            
            #line 59 ""
            this.Write(".vhdl $(WORKDIR)/system_types.o $(WORKDIR)/Types_");
            
            #line default
            #line hidden
            
            #line 59 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( RS.Network.Name ));
            
            #line default
            #line hidden
            
            #line 59 ""
            this.Write(".o ");
            
            #line default
            #line hidden
            
            #line 59 ""
 foreach(var file in Filenames) { 
            
            #line default
            #line hidden
            
            #line 60 ""
            this.Write("$(WORKDIR)/");
            
            #line default
            #line hidden
            
            #line 60 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( file ));
            
            #line default
            #line hidden
            
            #line 60 ""
            this.Write(".o ");
            
            #line default
            #line hidden
            
            #line 60 ""
 } 
            
            #line default
            #line hidden
            
            #line 61 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( cust_tag ));
            
            #line default
            #line hidden
            
            #line 61 ""
            this.Write("\n\n\tghdl -a --std=$(STD) --ieee=$(IEEE) --workdir=$(WORKDIR) $(FLAGS) ");
            
            #line default
            #line hidden
            
            #line 63 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( RS.Network.Name ));
            
            #line default
            #line hidden
            
            #line 63 ""
            this.Write(".vhdl\n\n$(WORKDIR)/TestBench_");
            
            #line default
            #line hidden
            
            #line 65 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( RS.Network.Name ));
            
            #line default
            #line hidden
            
            #line 65 ""
            this.Write(".o: TestBench_");
            
            #line default
            #line hidden
            
            #line 65 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( RS.Network.Name ));
            
            #line default
            #line hidden
            
            #line 65 ""
            this.Write(".vhdl $(WORKDIR)/");
            
            #line default
            #line hidden
            
            #line 65 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( RS.Network.Name ));
            
            #line default
            #line hidden
            
            #line 65 ""
            this.Write(".o\n\tghdl -a --std=$(STD) --ieee=$(IEEE) --workdir=$(WORKDIR) $(FLAGS) TestBench_");
            
            #line default
            #line hidden
            
            #line 66 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( RS.Network.Name ));
            
            #line default
            #line hidden
            
            #line 66 ""
            this.Write(".vhdl\n\n");
            
            #line default
            #line hidden
            
            #line 68 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( RS.Network.Name.ToLower() ));
            
            #line default
            #line hidden
            
            #line 68 ""
            this.Write("_tb: $(WORKDIR)/TestBench_");
            
            #line default
            #line hidden
            
            #line 68 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( RS.Network.Name ));
            
            #line default
            #line hidden
            
            #line 68 ""
            this.Write(".o\n\tghdl -e --std=$(STD) --ieee=$(IEEE) --workdir=$(WORKDIR) $(FLAGS) ");
            
            #line default
            #line hidden
            
            #line 69 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( RS.Network.Name ));
            
            #line default
            #line hidden
            
            #line 69 ""
            this.Write("_tb\n\n");
            
            #line default
            #line hidden
            
            #line 71 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( RS.Network.Name ));
            
            #line default
            #line hidden
            
            #line 71 ""
            this.Write("_export: $(WORKDIR)/");
            
            #line default
            #line hidden
            
            #line 71 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( RS.Network.Name ));
            
            #line default
            #line hidden
            
            #line 71 ""
            this.Write(".o\n\tghdl -a --std=$(STD) --ieee=$(IEEE) --workdir=$(WORKDIR) $(FLAGS) Export_");
            
            #line default
            #line hidden
            
            #line 72 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( RS.Network.Name ));
            
            #line default
            #line hidden
            
            #line 72 ""
            this.Write(".vhdl\n\ntest: ");
            
            #line default
            #line hidden
            
            #line 74 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( RS.Network.Name.ToLower() ));
            
            #line default
            #line hidden
            
            #line 74 ""
            this.Write("_tb\n\tcp \"");
            
            #line default
            #line hidden
            
            #line 75 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( RS.CSVTracename ));
            
            #line default
            #line hidden
            
            #line 75 ""
            this.Write("\" .\n\tghdl -r --std=$(STD) --ieee=$(IEEE) --workdir=$(WORKDIR) $(FLAGS) ");
            
            #line default
            #line hidden
            
            #line 76 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( RS.Network.Name ));
            
            #line default
            #line hidden
            
            #line 76 ""
            this.Write("_tb --vcd=$(VCDFILE)\n\nclean:\n\trm -rf $(WORKDIR) *.o ");
            
            #line default
            #line hidden
            
            #line 79 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( RS.Network.Name.ToLower() ));
            
            #line default
            #line hidden
            
            #line 79 ""
            this.Write("_tb\n\n\n.PHONY: all clean test export build");
            
            #line default
            #line hidden
            
            #line 82 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( cust_tag ));
            
            #line default
            #line hidden
            
            #line 82 ""
            this.Write("\n");
            
            #line default
            #line hidden
            return this.GenerationEnvironment.ToString();
        }
        
        public virtual void Initialize() {
        }
    }
    
    public class GHDL_MakefileBase {
        
        private global::System.Text.StringBuilder builder;
        
        private global::System.Collections.Generic.IDictionary<string, object> session;
        
        private global::System.CodeDom.Compiler.CompilerErrorCollection errors;
        
        private string currentIndent = string.Empty;
        
        private global::System.Collections.Generic.Stack<int> indents;
        
        private ToStringInstanceHelper _toStringHelper = new ToStringInstanceHelper();
        
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session {
            get {
                return this.session;
            }
            set {
                this.session = value;
            }
        }
        
        public global::System.Text.StringBuilder GenerationEnvironment {
            get {
                if ((this.builder == null)) {
                    this.builder = new global::System.Text.StringBuilder();
                }
                return this.builder;
            }
            set {
                this.builder = value;
            }
        }
        
        protected global::System.CodeDom.Compiler.CompilerErrorCollection Errors {
            get {
                if ((this.errors == null)) {
                    this.errors = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errors;
            }
        }
        
        public string CurrentIndent {
            get {
                return this.currentIndent;
            }
        }
        
        private global::System.Collections.Generic.Stack<int> Indents {
            get {
                if ((this.indents == null)) {
                    this.indents = new global::System.Collections.Generic.Stack<int>();
                }
                return this.indents;
            }
        }
        
        public ToStringInstanceHelper ToStringHelper {
            get {
                return this._toStringHelper;
            }
        }
        
        public void Error(string message) {
            this.Errors.Add(new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message));
        }
        
        public void Warning(string message) {
            global::System.CodeDom.Compiler.CompilerError val = new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message);
            val.IsWarning = true;
            this.Errors.Add(val);
        }
        
        public string PopIndent() {
            if ((this.Indents.Count == 0)) {
                return string.Empty;
            }
            int lastPos = (this.currentIndent.Length - this.Indents.Pop());
            string last = this.currentIndent.Substring(lastPos);
            this.currentIndent = this.currentIndent.Substring(0, lastPos);
            return last;
        }
        
        public void PushIndent(string indent) {
            this.Indents.Push(indent.Length);
            this.currentIndent = (this.currentIndent + indent);
        }
        
        public void ClearIndent() {
            this.currentIndent = string.Empty;
            this.Indents.Clear();
        }
        
        public void Write(string textToAppend) {
            this.GenerationEnvironment.Append(textToAppend);
        }
        
        public void Write(string format, params object[] args) {
            this.GenerationEnvironment.AppendFormat(format, args);
        }
        
        public void WriteLine(string textToAppend) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendLine(textToAppend);
        }
        
        public void WriteLine(string format, params object[] args) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendFormat(format, args);
            this.GenerationEnvironment.AppendLine();
        }
        
        public class ToStringInstanceHelper {
            
            private global::System.IFormatProvider formatProvider = global::System.Globalization.CultureInfo.InvariantCulture;
            
            public global::System.IFormatProvider FormatProvider {
                get {
                    return this.formatProvider;
                }
                set {
                    if ((value != null)) {
                        this.formatProvider = value;
                    }
                }
            }
            
            public string ToStringWithCulture(object objectToConvert) {
                if ((objectToConvert == null)) {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                global::System.Type type = objectToConvert.GetType();
                global::System.Type iConvertibleType = typeof(global::System.IConvertible);
                if (iConvertibleType.IsAssignableFrom(type)) {
                    return ((global::System.IConvertible)(objectToConvert)).ToString(this.formatProvider);
                }
                global::System.Reflection.MethodInfo methInfo = type.GetMethod("ToString", new global::System.Type[] {
                            iConvertibleType});
                if ((methInfo != null)) {
                    return ((string)(methInfo.Invoke(objectToConvert, new object[] {
                                this.formatProvider})));
                }
                return objectToConvert.ToString();
            }
        }
    }
}
