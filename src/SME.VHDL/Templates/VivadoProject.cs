//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SME.VHDL.Templates {
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;


    public partial class VivadoProject : VivadoProjectBase {

        public readonly Network Network;
        public readonly RenderState RS;
        public readonly Simulation Simulation;
        public readonly string Runtime;
        public readonly AST.Process[] Processes;

        public VivadoProject(RenderState renderer, AST.Process[] processes)
        {
            RS = renderer;
            Network = renderer.Network;
            Simulation = renderer.Simulation;
            Runtime = ((Simulation.Tick + 2) * 10) + "ns";
            Processes = processes;

        }

        public virtual string TransformText() {
            this.GenerationEnvironment = null;

            #line 6 ""
            this.Write("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Project Version=\"7\" Minor=\"35\" Path=\"./");

            #line default
            #line hidden

            #line 7 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( Network.Name ));

            #line default
            #line hidden

            #line 7 ""
            this.Write(".xpr\">\n  <DefaultLaunch Dir=\"$PRUNDIR\"/>\n  <Configuration>\n    <Option Name=\"Id\" " +
                    "Val=\"da04b7443593460ab7943c9e399803cf\"/>\n    <Option Name=\"Part\" Val=\"xc7z020clg" +
                    "484-1\"/>\n    <Option Name=\"CompiledLibDir\" Val=\"$PCACHEDIR/compile_simlib\"/>\n   " +
                    " <Option Name=\"CompiledLibDirXSim\" Val=\"\"/>\n    <Option Name=\"CompiledLibDirMode" +
                    "lSim\" Val=\"$PCACHEDIR/compile_simlib/modelsim\"/>\n    <Option Name=\"CompiledLibDi" +
                    "rQuesta\" Val=\"$PCACHEDIR/compile_simlib/questa\"/>\n    <Option Name=\"CompiledLibD" +
                    "irIES\" Val=\"$PCACHEDIR/compile_simlib/ies\"/>\n    <Option Name=\"CompiledLibDirXce" +
                    "lium\" Val=\"$PCACHEDIR/compile_simlib/xcelium\"/>\n    <Option Name=\"CompiledLibDir" +
                    "VCS\" Val=\"$PCACHEDIR/compile_simlib/vcs\"/>\n    <Option Name=\"CompiledLibDirRivie" +
                    "ra\" Val=\"$PCACHEDIR/compile_simlib/riviera\"/>\n    <Option Name=\"CompiledLibDirAc" +
                    "tivehdl\" Val=\"$PCACHEDIR/compile_simlib/activehdl\"/>\n    <Option Name=\"TargetLan" +
                    "guage\" Val=\"VHDL\"/>\n    <Option Name=\"SimulatorLanguage\" Val=\"VHDL\"/>\n    <Optio" +
                    "n Name=\"BoardPart\" Val=\"em.avnet.com:zed:part0:1.3\"/>\n    <Option Name=\"ActiveSi" +
                    "mSet\" Val=\"sim_1\"/>\n    <Option Name=\"DefaultLib\" Val=\"xil_defaultlib\"/>\n    <Op" +
                    "tion Name=\"ProjectType\" Val=\"Default\"/>\n    <Option Name=\"IPOutputRepo\" Val=\"$PC" +
                    "ACHEDIR/ip\"/>\n    <Option Name=\"IPCachePermission\" Val=\"read\"/>\n    <Option Name" +
                    "=\"IPCachePermission\" Val=\"write\"/>\n    <Option Name=\"EnableCoreContainer\" Val=\"F" +
                    "ALSE\"/>\n    <Option Name=\"CreateRefXciForCoreContainers\" Val=\"FALSE\"/>\n    <Opti" +
                    "on Name=\"IPUserFilesDir\" Val=\"$PIPUSERFILESDIR\"/>\n    <Option Name=\"IPStaticSour" +
                    "ceDir\" Val=\"$PIPUSERFILESDIR/ipstatic\"/>\n    <Option Name=\"EnableBDX\" Val=\"FALSE" +
                    "\"/>\n    <Option Name=\"DSAVendor\" Val=\"xilinx\"/>\n    <Option Name=\"DSABoardId\" Va" +
                    "l=\"zed\"/>\n    <Option Name=\"DSANumComputeUnits\" Val=\"16\"/>\n    <Option Name=\"WTX" +
                    "SimLaunchSim\" Val=\"84\"/>\n    <Option Name=\"WTModelSimLaunchSim\" Val=\"0\"/>\n    <O" +
                    "ption Name=\"WTQuestaLaunchSim\" Val=\"0\"/>\n    <Option Name=\"WTIesLaunchSim\" Val=\"" +
                    "0\"/>\n    <Option Name=\"WTVcsLaunchSim\" Val=\"0\"/>\n    <Option Name=\"WTRivieraLaun" +
                    "chSim\" Val=\"0\"/>\n    <Option Name=\"WTActivehdlLaunchSim\" Val=\"0\"/>\n    <Option N" +
                    "ame=\"WTXSimExportSim\" Val=\"0\"/>\n    <Option Name=\"WTModelSimExportSim\" Val=\"0\"/>" +
                    "\n    <Option Name=\"WTQuestaExportSim\" Val=\"0\"/>\n    <Option Name=\"WTIesExportSim" +
                    "\" Val=\"0\"/>\n    <Option Name=\"WTVcsExportSim\" Val=\"0\"/>\n    <Option Name=\"WTRivi" +
                    "eraExportSim\" Val=\"0\"/>\n    <Option Name=\"WTActivehdlExportSim\" Val=\"0\"/>\n    <O" +
                    "ption Name=\"GenerateIPUpgradeLog\" Val=\"TRUE\"/>\n    <Option Name=\"XSimRadix\" Val=" +
                    "\"hex\"/>\n    <Option Name=\"XSimTimeUnit\" Val=\"ns\"/>\n    <Option Name=\"XSimArrayDi" +
                    "splayLimit\" Val=\"1024\"/>\n    <Option Name=\"XSimTraceLimit\" Val=\"65536\"/>\n    <Op" +
                    "tion Name=\"SimTypes\" Val=\"rtl\"/>\n  </Configuration>\n  <FileSets Version=\"1\" Mino" +
                    "r=\"31\">\n    <FileSet Name=\"sources_1\" Type=\"DesignSrcs\" RelSrcDir=\"$PSRCDIR/sour" +
                    "ces_1\">\n      <Filter Type=\"Srcs\"/>\n      <File Path=\"$PPRDIR/system_types.vhdl\"" +
                    ">\n        <FileInfo>\n          <Attr Name=\"Library\" Val=\"xil_defaultlib\"/>\n     " +
                    "     <Attr Name=\"IsGlobalInclude\" Val=\"1\"/>\n          <Attr Name=\"UsedIn\" Val=\"s" +
                    "ynthesis\"/>\n          <Attr Name=\"UsedIn\" Val=\"simulation\"/>\n        </FileInfo>" +
                    "\n      </File>\n      <File Path=\"$PPRDIR/Types_");

            #line default
            #line hidden

            #line 70 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( Naming.AssemblyNameToFileName(Simulation) ));

            #line default
            #line hidden

            #line 70 ""
            this.Write(@""">
        <FileInfo>
          <Attr Name=""Library"" Val=""xil_defaultlib""/>
          <Attr Name=""IsGlobalInclude"" Val=""1""/>
          <Attr Name=""UsedIn"" Val=""synthesis""/>
          <Attr Name=""UsedIn"" Val=""simulation""/>
        </FileInfo>
      </File>
");

            #line default
            #line hidden

            #line 78 ""
 foreach (var p in Processes) {

            #line default
            #line hidden

            #line 79 ""
            this.Write("      <File Path=\"$PPRDIR/");

            #line default
            #line hidden

            #line 79 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( Naming.ProcessNameToFileName(p.SourceInstance.Instance) ));

            #line default
            #line hidden

            #line 79 ""
            this.Write("\">\n        <FileInfo>\n          <Attr Name=\"Library\" Val=\"xil_defaultlib\"/>\n     " +
                    "     <Attr Name=\"UsedIn\" Val=\"synthesis\"/>\n          <Attr Name=\"UsedIn\" Val=\"si" +
                    "mulation\"/>\n        </FileInfo>\n      </File>\n");

            #line default
            #line hidden

            #line 86 ""
 }

            #line default
            #line hidden

            #line 87 ""
            this.Write("      <File Path=\"$PPRDIR/");

            #line default
            #line hidden

            #line 87 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( Naming.AssemblyNameToFileName(Simulation) ));

            #line default
            #line hidden

            #line 87 ""
            this.Write(@""">
        <FileInfo>
          <Attr Name=""Library"" Val=""xil_defaultlib""/>
          <Attr Name=""UsedIn"" Val=""synthesis""/>
          <Attr Name=""UsedIn"" Val=""simulation""/>
        </FileInfo>
      </File>
      <Config>
        <Option Name=""DesignMode"" Val=""RTL""/>
        <Option Name=""TopModule"" Val=""");

            #line default
            #line hidden

            #line 96 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( Network.Name ));

            #line default
            #line hidden

            #line 96 ""
            this.Write(@"""/>
        <Option Name=""TopAutoSet"" Val=""TRUE""/>
      </Config>
    </FileSet>
    <FileSet Name=""constrs_1"" Type=""Constrs"" RelSrcDir=""$PSRCDIR/constrs_1"">
      <Filter Type=""Constrs""/>
      <Config>
        <Option Name=""ConstrsType"" Val=""XDC""/>
      </Config>
    </FileSet>
    <FileSet Name=""sim_1"" Type=""SimulationSrcs"" RelSrcDir=""$PSRCDIR/sim_1"">
      <Filter Type=""Srcs""/>
      <File Path=""$PPRDIR/csv_util.vhdl"">
        <FileInfo>
          <Attr Name=""Library"" Val=""xil_defaultlib""/>
          <Attr Name=""UsedIn"" Val=""synthesis""/>
          <Attr Name=""UsedIn"" Val=""simulation""/>
        </FileInfo>
      </File>
      <File Path=""$PPRDIR/TestBench_");

            #line default
            #line hidden

            #line 115 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( Naming.AssemblyNameToFileName(Simulation) ));

            #line default
            #line hidden

            #line 115 ""
            this.Write("\">\n        <FileInfo>\n          <Attr Name=\"Library\" Val=\"xil_defaultlib\"/>\n     " +
                    "     <Attr Name=\"UsedIn\" Val=\"synthesis\"/>\n          <Attr Name=\"UsedIn\" Val=\"si" +
                    "mulation\"/>\n        </FileInfo>\n      </File>\n      <File Path=\"$PPRDIR/");

            #line default
            #line hidden

            #line 122 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( RS.CSVTracename ));

            #line default
            #line hidden

            #line 122 ""
            this.Write("\">\n          <Attr Name=\"UsedIn\" Val=\"simulation\"/>\n      </File>\n      <Config>\n" +
                    "        <Option Name=\"DesignMode\" Val=\"RTL\"/>\n        <Option Name=\"TopModule\" V" +
                    "al=\"");

            #line default
            #line hidden

            #line 127 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( Network.Name ));

            #line default
            #line hidden

            #line 127 ""
            this.Write(@"_tb""/>
        <Option Name=""TopLib"" Val=""xil_defaultlib""/>
        <Option Name=""TransportPathDelay"" Val=""0""/>
        <Option Name=""TransportIntDelay"" Val=""0""/>
        <Option Name=""SrcSet"" Val=""sources_1""/>
        <Option Name=""xsim.simulate.runtime"" Val=""");

            #line default
            #line hidden

            #line 132 ""
            this.Write(this.ToStringHelper.ToStringWithCulture( Runtime ));

            #line default
            #line hidden

            #line 132 ""
            this.Write("\"/>\n      </Config>\n    </FileSet>\n  </FileSets>\n  <Simulators>\n    <Simulator Na" +
                    "me=\"XSim\">\n      <Option Name=\"Description\" Val=\"Vivado Simulator\"/>\n      <Opti" +
                    "on Name=\"CompiledLib\" Val=\"0\"/>\n    </Simulator>\n    <Simulator Name=\"ModelSim\">" +
                    "\n      <Option Name=\"Description\" Val=\"ModelSim Simulator\"/>\n    </Simulator>\n  " +
                    "  <Simulator Name=\"Questa\">\n      <Option Name=\"Description\" Val=\"Questa Advance" +
                    "d Simulator\"/>\n    </Simulator>\n    <Simulator Name=\"Riviera\">\n      <Option Nam" +
                    "e=\"Description\" Val=\"Riviera-PRO Simulator\"/>\n    </Simulator>\n    <Simulator Na" +
                    "me=\"ActiveHDL\">\n      <Option Name=\"Description\" Val=\"Active-HDL Simulator\"/>\n  " +
                    "  </Simulator>\n  </Simulators>\n  <Runs Version=\"1\" Minor=\"10\">\n    <Run Id=\"synt" +
                    "h_1\" Type=\"Ft3:Synth\" SrcSet=\"sources_1\" Part=\"xc7z020clg484-1\" ConstrsSet=\"cons" +
                    "trs_1\" Description=\"Vivado Synthesis Defaults\" WriteIncrSynthDcp=\"false\" State=\"" +
                    "current\" IncludeInArchive=\"true\">\n      <Strategy Version=\"1\" Minor=\"2\">\n       " +
                    " <StratHandle Name=\"Vivado Synthesis Defaults\" Flow=\"Vivado Synthesis 2017\"/>\n  " +
                    "      <Step Id=\"synth_design\"/>\n      </Strategy>\n      <ReportStrategy Name=\"Vi" +
                    "vado Synthesis Default Reports\" Flow=\"Vivado Synthesis 2017\"/>\n      <Report Nam" +
                    "e=\"ROUTE_DESIGN.REPORT_METHODOLOGY\" Enabled=\"1\"/>\n    </Run>\n    <Run Id=\"impl_1" +
                    "\" Type=\"Ft2:EntireDesign\" Part=\"xc7z020clg484-1\" ConstrsSet=\"constrs_1\" Descript" +
                    "ion=\"Default settings for Implementation.\" WriteIncrSynthDcp=\"false\" State=\"curr" +
                    "ent\" SynthRun=\"synth_1\" IncludeInArchive=\"true\">\n      <Strategy Version=\"1\" Min" +
                    "or=\"2\">\n        <StratHandle Name=\"Vivado Implementation Defaults\" Flow=\"Vivado " +
                    "Implementation 2017\"/>\n        <Step Id=\"init_design\"/>\n        <Step Id=\"opt_de" +
                    "sign\"/>\n        <Step Id=\"power_opt_design\"/>\n        <Step Id=\"place_design\"/>\n" +
                    "        <Step Id=\"post_place_power_opt_design\"/>\n        <Step Id=\"phys_opt_desi" +
                    "gn\"/>\n        <Step Id=\"route_design\"/>\n        <Step Id=\"post_route_phys_opt_de" +
                    "sign\"/>\n        <Step Id=\"write_bitstream\"/>\n      </Strategy>\n      <ReportStra" +
                    "tegy Name=\"Vivado Implementation Default Reports\" Flow=\"Vivado Implementation 20" +
                    "17\"/>\n      <Report Name=\"ROUTE_DESIGN.REPORT_METHODOLOGY\" Enabled=\"1\"/>\n    </R" +
                    "un>\n  </Runs>\n  <Board>\n    <Jumpers/>\n  </Board>\n</Project>");

            #line default
            #line hidden
            return this.GenerationEnvironment.ToString();
        }

        public virtual void Initialize() {
        }
    }

    public class VivadoProjectBase {

        private global::System.Text.StringBuilder builder;

        private global::System.Collections.Generic.IDictionary<string, object> session;

        private global::System.CodeDom.Compiler.CompilerErrorCollection errors;

        private string currentIndent = string.Empty;

        private global::System.Collections.Generic.Stack<int> indents;

        private ToStringInstanceHelper _toStringHelper = new ToStringInstanceHelper();

        public virtual global::System.Collections.Generic.IDictionary<string, object> Session {
            get {
                return this.session;
            }
            set {
                this.session = value;
            }
        }

        public global::System.Text.StringBuilder GenerationEnvironment {
            get {
                if ((this.builder == null)) {
                    this.builder = new global::System.Text.StringBuilder();
                }
                return this.builder;
            }
            set {
                this.builder = value;
            }
        }

        protected global::System.CodeDom.Compiler.CompilerErrorCollection Errors {
            get {
                if ((this.errors == null)) {
                    this.errors = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errors;
            }
        }

        public string CurrentIndent {
            get {
                return this.currentIndent;
            }
        }

        private global::System.Collections.Generic.Stack<int> Indents {
            get {
                if ((this.indents == null)) {
                    this.indents = new global::System.Collections.Generic.Stack<int>();
                }
                return this.indents;
            }
        }

        public ToStringInstanceHelper ToStringHelper {
            get {
                return this._toStringHelper;
            }
        }

        public void Error(string message) {
            this.Errors.Add(new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message));
        }

        public void Warning(string message) {
            global::System.CodeDom.Compiler.CompilerError val = new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message);
            val.IsWarning = true;
            this.Errors.Add(val);
        }

        public string PopIndent() {
            if ((this.Indents.Count == 0)) {
                return string.Empty;
            }
            int lastPos = (this.currentIndent.Length - this.Indents.Pop());
            string last = this.currentIndent.Substring(lastPos);
            this.currentIndent = this.currentIndent.Substring(0, lastPos);
            return last;
        }

        public void PushIndent(string indent) {
            this.Indents.Push(indent.Length);
            this.currentIndent = (this.currentIndent + indent);
        }

        public void ClearIndent() {
            this.currentIndent = string.Empty;
            this.Indents.Clear();
        }

        public void Write(string textToAppend) {
            this.GenerationEnvironment.Append(textToAppend);
        }

        public void Write(string format, params object[] args) {
            this.GenerationEnvironment.AppendFormat(format, args);
        }

        public void WriteLine(string textToAppend) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendLine(textToAppend);
        }

        public void WriteLine(string format, params object[] args) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendFormat(format, args);
            this.GenerationEnvironment.AppendLine();
        }

        public class ToStringInstanceHelper {

            private global::System.IFormatProvider formatProvider = global::System.Globalization.CultureInfo.InvariantCulture;

            public global::System.IFormatProvider FormatProvider {
                get {
                    return this.formatProvider;
                }
                set {
                    if ((value != null)) {
                        this.formatProvider = value;
                    }
                }
            }

            public string ToStringWithCulture(object objectToConvert) {
                if ((objectToConvert == null)) {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                global::System.Type type = objectToConvert.GetType();
                global::System.Type iConvertibleType = typeof(global::System.IConvertible);
                if (iConvertibleType.IsAssignableFrom(type)) {
                    return ((global::System.IConvertible)(objectToConvert)).ToString(this.formatProvider);
                }
                global::System.Reflection.MethodInfo methInfo = type.GetMethod("ToString", new global::System.Type[] {
                            iConvertibleType});
                if ((methInfo != null)) {
                    return ((string)(methInfo.Invoke(objectToConvert, new object[] {
                                this.formatProvider})));
                }
                return objectToConvert.ToString();
            }
        }
    }
}
