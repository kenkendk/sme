<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="SME.VHDL" #>
<#@ import namespace="SME.AST" #>

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;
use STD.TEXTIO.all;
use IEEE.STD_LOGIC_TEXTIO.all;

--library SYSTEM_TYPES;
use work.SYSTEM_TYPES.ALL;

--library CUSTOM_TYPES;
use work.CUSTOM_TYPES.ALL;

use work.csv_util.all;

-- User defined packages here
-- #### USER-DATA-IMPORTS-START
-- #### USER-DATA-IMPORTS-END

entity <#= Network.Name #>_tb is
end;

architecture TestBench of <#= Network.Name #>_tb is

  signal CLOCK : Std_logic;
  signal StopClock : BOOLEAN;
  signal RESET : Std_logic;
  signal ENABLE : Std_logic;

<# foreach (var signal in RS.AllSignals) { #>
  signal <#= ((AST.Bus)signal.Parent).InstanceName#>_<#= signal.Name#> : <#= RS.VHDLWrappedTypeName(signal) #>;
<# } #>

begin

  uut: entity work.<#= Network.Name #>
  port map (

<#foreach (var signal in RS.AllSignals) { #>
    <#= ((AST.Bus)signal.Parent).InstanceName#>_<#=signal.Name#> => <#= ((AST.Bus)signal.Parent).InstanceName#>_<#=signal.Name#>,
<# } #>

    ENB => ENABLE,
    RST => RESET,
    CLK => CLOCK
  );

  Clk: process
  begin
    while not StopClock loop
      CLOCK <= '1';
      wait for <#= RS.ClockPulseLength #> NS;
      CLOCK <= '0';
      wait for <#= RS.ClockPulseLength #> NS;
    end loop;
    wait;
  end process;


TraceFileTester: process
    file F: TEXT;
    variable L: LINE;
    variable Status: FILE_OPEN_STATUS;
    constant filename : string := "./trace.csv";
    variable clockcycle : integer := 0;
    variable tmp : CSV_LINE_T;
    variable readOK : boolean;
    variable fieldno : integer := 0;
    variable failures : integer := 0;
    variable newfailures: integer := 0;
    variable first_failure_tick : integer := -1;
    variable first_round : boolean := true;

begin

    -- #### USER-DATA-CONDITONING-START
    -- #### USER-DATA-CONDITONING-END

    FILE_OPEN(Status, F, filename, READ_MODE);
    if Status /= OPEN_OK then
        report "Failed to open CSV trace file" severity Failure;
    else
        -- Verify the headers
        READLINE(F, L);

        fieldno := 0;
<# foreach (var signal in RS.DriverSignals.Concat(RS.VerifySignals)) { #>
        read_csv_field(L, tmp);
        assert are_strings_equal(tmp, "<#= RS.TestBenchSignalName(signal) #>") report "Field #" & integer'image(fieldno) & " is not correctly named: " & truncate(tmp) & ", expected <#= RS.TestBenchSignalName(signal) #>" severity Failure;
        fieldno := fieldno + 1;
<# } #>

        RESET <= '1';
        ENABLE <= '0';
        wait for <#= RS.ClockPulseLength #> NS;
        RESET <= '0';
        ENABLE <= '1';

        -- Read a line each clock
        while not ENDFILE(F) loop
            READLINE(F, L);

            fieldno := 0;
            newfailures := 0;
            -- Write all driver signals out on the clock edge,
            -- except on the first round, where we make sure the reset
            -- values are propagated _before_ the initial clock edge
            if not first_round then
                wait until rising_edge(CLOCK);
            end if;

<# if (RS.DriverSignals.Count() > 0) { #>

<#     foreach (var signal in RS.DriverSignals) { 
           var vhdltype = RS.VHDLType(signal);
#>
            read_csv_field(L, tmp);
<#        if (vhdltype.IsStdLogic || vhdltype == VHDLTypes.SYSTEM_BOOL) { #>
            if are_strings_equal(tmp, "U") then
                <#= ((AST.Bus)signal.Parent).InstanceName#>_<#=signal.Name#> <= 'U';
            else
                <#= ((AST.Bus)signal.Parent).InstanceName#>_<#=signal.Name#> <= to_std_logic(truncate(tmp));
            end if;
<#        } else if (vhdltype.IsStdLogicVector || vhdltype.IsSystemType || vhdltype.IsVHDLSigned || vhdltype.IsVHDLUnsigned) { #>
            if are_strings_equal(tmp, "U") then
                <#= ((AST.Bus)signal.Parent).InstanceName#>_<#=signal.Name#> <= (others => 'U');
            else
<#            if ((vhdltype.IsSystemType || vhdltype.IsVHDLSigned) && vhdltype.IsSigned) { #>
                <#= ((AST.Bus)signal.Parent).InstanceName#>_<#=signal.Name#> <= signed(to_std_logic_vector(truncate(tmp)));
<#            } else if ((vhdltype.IsSystemType || vhdltype.IsVHDLUnsigned) && vhdltype.IsUnsigned) { #>
                <#= ((AST.Bus)signal.Parent).InstanceName#>_<#=signal.Name#> <= unsigned(to_std_logic_vector(truncate(tmp)));
<#            } else { #>
                <#= ((AST.Bus)signal.Parent).InstanceName#>_<#=signal.Name#> <= to_std_logic_vector(truncate(tmp));
<#            } #>
            end if;
<#        } else { #>
            <#= ((AST.Bus)signal.Parent).InstanceName#>_<#=signal.Name#> <= <#= vhdltype.ToSafeVHDLName()#>'value(to_safe_name(truncate(tmp)));
<#        } #>
            fieldno := fieldno + 1;
<#     } #>
<# } #>

            if first_round then
                first_round := false;
            else
                -- Wait until the signals are settled before veriying the results
                wait until falling_edge(CLOCK);
            end if;

            -- Compare each signal with the value in the CSV file
<# foreach (var signal in RS.VerifySignals) { 
       var vhdltype = RS.VHDLType(signal);
#>
	        read_csv_field(L, tmp);
	        if not are_strings_equal(tmp, "U") then
<#    if (vhdltype.IsStdLogicVector || vhdltype.IsSystemType || vhdltype.IsVHDLSigned || vhdltype.IsVHDLUnsigned) { #>
            	if not are_strings_equal(str(<#= ((AST.Bus)signal.Parent).InstanceName#>_<#=signal.Name#>), tmp) then
                    newfailures := newfailures + 1;
                    report "Value for <#= ((AST.Bus)signal.Parent).InstanceName#>_<#=signal.Name#> in cycle " & integer'image(clockcycle) & " was: " & str(<#= ((AST.Bus)signal.Parent).InstanceName#>_<#=signal.Name#>) & " but should have been: " & truncate(tmp) severity Error;
                end if;
<#    } else { #>
            	if not are_strings_equal(<#= vhdltype.ToSafeVHDLName()#>'image(<#= ((AST.Bus)signal.Parent).InstanceName#>_<#=signal.Name#>), to_safe_name(tmp)) then
                    newfailures := newfailures + 1;
                    report "Value for <#= ((AST.Bus)signal.Parent).InstanceName#>_<#=signal.Name#> in cycle " & integer'image(clockcycle) & " was: " & <#= vhdltype.ToSafeVHDLName()#>'image(<#= ((AST.Bus)signal.Parent).InstanceName#>_<#=signal.Name#>) & " but should have been: " & to_safe_name(truncate(tmp)) severity Error;
                 end if;
<#    } #>
            end if;
            fieldno := fieldno + 1;

<# } #>
            failures := failures + newfailures;
            if newfailures = 0 then
                first_failure_tick := -1;
            elsif first_failure_tick = -1 then
                first_failure_tick := clockcycle;
            else
                if clockcycle - first_failure_tick >= 5 then
                    report "Stopping simulation due to five consecutive failed cycles" severity error;
                    StopClock <= true;
                elsif failures > 20 then
                    report "Stopping simulation after 20 failures" severity error;
                    StopClock <= true;
                end if;
            end if;

            clockcycle := clockcycle + 1;
        end loop;

        FILE_CLOSE(F);
    end if;

    if failures = 0 then
        report "completed successfully after " & integer'image(clockcycle) & " clockcycles";
    else
        report "completed with " & integer'image(failures) & " error(s) after " & integer'image(clockcycle) & " clockcycle(s)";
    end if;
    StopClock <= true;

    wait;
end process;
end architecture TestBench;