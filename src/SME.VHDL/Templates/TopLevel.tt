<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="SME" #>
<#@ import namespace="SME.VHDL" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="SME.AST" #>
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;

-- library SYSTEM_TYPES;
use work.SYSTEM_TYPES.ALL;

-- library CUSTOM_TYPES;
use work.CUSTOM_TYPES.ALL;

-- User defined packages here
-- #### USER-DATA-IMPORTS-START
-- #### USER-DATA-IMPORTS-END

entity <#= Network.Name #> is
  port(

<#
var feedbacks = RS.FeedbackBusses.ToArray();
var processes = Network.Processes.Where(x => !x.IsSimulation).ToArray();
#>

<# foreach (var bus in Network.Busses.Where(x => x.IsTopLevelInput || x.IsTopLevelOutput)) { 
	var signaltype = "inout"; 

	if (bus.IsTopLevelInput && !bus.IsTopLevelOutput)
		signaltype = "in";
	else if (bus.IsTopLevelOutput && !bus.IsTopLevelInput)
		signaltype = "out";
#>
    -- Top-level bus <#= bus.Name #> signals
<#     foreach (var signal in bus.Signals) { #>
    <#= Naming.ToValidName(bus.InstanceName + "_" + signal.Name) #>: <#= signaltype #> <#= RS.VHDLWrappedTypeName(signal) #>;
<#     } #>

<# } #>

<# foreach (var bus in Network.Busses.Where(x => !(x.IsTopLevelInput || x.IsTopLevelOutput || x.IsInternal))) { #>
    -- Interconnection bus <#= bus.Name #> signals
<#     foreach (var signal in bus.Signals) { #>
    <#= Naming.ToValidName(bus.InstanceName + "_" + signal.Name) #>: inout <#= RS.VHDLWrappedTypeName(signal) #>;
<#     } #>
<# } #>

    -- User defined signals here
    -- #### USER-DATA-ENTITYSIGNALS-START
    -- #### USER-DATA-ENTITYSIGNALS-END

    -- Enable signal
    ENB : in Std_logic;

    -- Finished signal
    FIN : out Std_logic;

	-- Reset signal
    RST : in Std_logic;

	-- Clock signal
	CLK : in Std_logic
  );
end <#= Network.Name #>;

architecture RTL of <#= Network.Name #> is  
    -- User defined signals here
    -- #### USER-DATA-SIGNALS-START
    -- #### USER-DATA-SIGNALS-END

<# if (feedbacks.Any()) { #>
    -- Feedback signals
<#     foreach (var signal in feedbacks.SelectMany(x => x.Signals)) { #>
    signal <#= Naming.ToValidName("current_" + (signal.Parent as AST.Bus).InstanceName + "_" + signal.Name) #>, <#= Naming.ToValidName("next_" + (signal.Parent as AST.Bus).InstanceName + "_" + signal.Name) #>: <#= RS.VHDLWrappedTypeName(signal) #>;
<#     } #>
<# } #>

    -- Process ready triggers
<# foreach (var p in processes) { #>

    signal <#= Naming.ToValidName("FIN_" + p.InstanceName) #><#= p.IsClocked ? string.Empty : ", " + Naming.ToValidName("RDY_" + p.InstanceName) #> : std_logic;
<# } #>

<# foreach (var bus in processes.SelectMany(x => x.OutputBusses.Intersect(x.InputBusses).Except(feedbacks))) { #>
    -- Bus <#= bus.Name #> intermediate signals
<#        foreach(var signal in bus.Signals) { #>
    signal <#= Naming.ToValidName("next_" + bus.InstanceName + "_" + signal.Name) #>: <#= RS.VHDLWrappedTypeName(signal) #>;
<#     } #>

<# } #>

    -- The primary ready driver signal
    signal RDY : std_logic;

begin

<# foreach (var p in processes) { #>

    -- Entity  <#= p.InstanceName #> signals
    <#= Naming.ToValidName(p.InstanceName) #>: entity work.<#= Naming.ProcessNameToValidName(p.SourceInstance.Instance) #>
<# var lastel = p.SharedVariables.Cast<object>().Concat(p.SharedSignals).LastOrDefault();
   if (lastel != null) {
#>
    generic map(
<#     foreach (var variable in p.SharedVariables) { #>
        <#= Naming.ToValidName("reset_" + variable.Name) #> => <#= RS.GetResetExpression(variable) #><#= variable == lastel ? "" : "," #>
<#     } #>
<#     foreach (var variable in p.SharedSignals) { #>
        <#= Naming.ToValidName("reset_" + variable.Name) #> => <#= RS.GetResetExpression(variable) #><#= variable == lastel ? "" : "," #>
<#     } #>
    )
<# } #>
    port map (
<#    foreach (var bus in p.InputBusses.Union(p.OutputBusses)) { 
	      var isInput = p.InputBusses.Contains(bus);
	      var isOutput = p.OutputBusses.Contains(bus);
	      var isBoth = isInput && isOutput;
	      var type = "Input/Output";
	      if (isInput && !isOutput)
	          type = "Input";
	      else if (isOutput && !isInput)
	          type = "Output";

	      var output_prefix = string.Empty;
	      var input_prefix = string.Empty;
          if (feedbacks.Contains(bus))
              input_prefix = output_prefix = "current_";

          var busname = RS.GetLocalBusName(bus, p);
          var signals = bus.Signals.AsEnumerable();

	      if (isOutput && !isBoth)
	      	signals = RS.WrittenSignals(p, bus);
#>
        -- <#= type #> bus <#= bus.Name #>
<#		  foreach(var signal in signals) { #>
<#              if (isInput || isBoth) { #>
        <#= Naming.ToValidName(busname + "_" + signal.Name) #> => <#= Naming.ToValidName(input_prefix + bus.InstanceName + "_" + signal.Name) #>,
<#              } else { #>
        <#= Naming.ToValidName(busname + "_" + signal.Name) #> => <#= Naming.ToValidName(output_prefix + bus.InstanceName + "_" + signal.Name) #>,
<#              } #>
<#        } #>

<#        if (isBoth) { #>
<#		      foreach(var signal in bus.Signals) { #>
        <#= Naming.ToValidName("out_" + busname + "_" + signal.Name) #> => <#= Naming.ToValidName("next_" + bus.InstanceName + "_" + signal.Name) #>,
<#            } #>
<#        } #>

<#    } #>

        CLK => CLK,
        RDY => <#= p.IsClocked ? "RDY" : Naming.ToValidName("RDY_" + p.InstanceName) #>,
        FIN => <#= Naming.ToValidName("FIN_" + p.InstanceName) #>,
        ENB => ENB,
        RST => RST
    );

<# } #>

    -- Connect ready signals
<# foreach (var p in processes) { 
       var parents = RS.DependsOn(p).Select(x => x.InstanceName).Distinct().ToArray();
       if (parents.Length == 0) {
           if (!p.IsClocked) { #>
    <#= Naming.ToValidName("RDY_" + p.InstanceName) #> <= RDY;
<#         }
       } else if (parents.Length == 1) { #>
    <#= Naming.ToValidName("RDY_" + p.InstanceName) #> <= <#= Naming.ToValidName("FIN_" + parents.First()) #>;
<#     } else { #>
    -- Setup the RDY signal for <#= p.InstanceName #>
    process(
      <#= string.Join(", " + Environment.NewLine + "      ", parents.Select(x => string.Format(Naming.ToValidName("FIN_" + x)))) #>
    )
    begin
      if <#= string.Join(" AND ", parents.Skip(1).Select(x => string.Format("{0} = {1}", Naming.ToValidName("FIN_" + parents.First()), Naming.ToValidName("FIN_" + x)))) #> then
        <#= Naming.ToValidName("RDY_" + p.InstanceName) #> <= <#= Naming.ToValidName("FIN_" + parents.First()) #>;
      end if;
    end process;
<#     } #>
<# } #>

    -- Setup the FIN feedback signals
<# if (processes.Length == 1) { #>
    FIN <= <#= Naming.ToValidName("FIN_" + processes.First().InstanceName) #>;
<# } else { #>
    process(
      <#= string.Join(", " + Environment.NewLine + "      ", processes.Select(x => Naming.ToValidName("FIN_" + x.InstanceName))) #>
    )
    begin
      if <#= string.Join(" AND ", processes.Skip(1).Select(x => string.Format("{0} = {1}", Naming.ToValidName("FIN_" + processes.First().InstanceName), Naming.ToValidName("FIN_" + x.InstanceName)))) #> then
        FIN <= <#= Naming.ToValidName("FIN_" + processes.First().InstanceName) #>;
      end if;
    end process;
<# } #>

    -- Propagate all clocked and feedback signals
    process(
        CLK,
        RST)

        variable readyflag: std_logic;
    begin
        if RST = '1' then
            RDY <= '0';
            readyflag := '1';
        elsif rising_edge(CLK) then
            if ENB = '1' then
                readyflag := not readyflag;
                RDY <= readyflag;
<# if (feedbacks.Any()) { #>
                -- Forward feedback signals
<#     foreach (var signal in feedbacks.SelectMany(x => x.Signals)) { #>
                current_<#= Naming.ToValidName((signal.Parent as AST.Bus).InstanceName + "_" + signal.Name) #> <= next_<#= Naming.ToValidName((signal.Parent as AST.Bus).InstanceName + "_" + signal.Name) #>;
<#     } #>
<# } #>

<# foreach (var bus in processes.SelectMany(x => x.OutputBusses.Intersect(x.InputBusses)).Except(feedbacks).Where(x => !x.IsTopLevelInput)) { #>
                -- Bus <#= bus.Name #> intermediate signals
<#        foreach(var signal in bus.Signals) { #>
                <#= Naming.ToValidName(bus.InstanceName + "_" + signal.Name) #> <= <#= Naming.ToValidName("next_" + bus.InstanceName + "_" + signal.Name) #>;
<#     } #>

<# } #>

            end if;
        end if;
    end process;

<# if (feedbacks.Where(x => x.IsTopLevelOutput).Any()) { #>
    -- Send feedback outputs to the actual output
<#     foreach (var signal in feedbacks.Where(x => x.IsTopLevelOutput).SelectMany(x => x.Signals)) { #>
    <#= Naming.ToValidName((signal.Parent as AST.Bus).InstanceName + "_" + signal.Name) #> <= <#= Naming.ToValidName("next_" + (signal.Parent as AST.Bus).InstanceName + "_" + signal.Name) #>;
<#     } #>
<# } #>


-- User defined processes here
-- #### USER-DATA-CODE-START
-- #### USER-DATA-CODE-END

end RTL;